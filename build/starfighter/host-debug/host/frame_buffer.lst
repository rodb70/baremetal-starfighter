   1              		.file	"frame_buffer.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	videoBuffer
   5              		.section	.bss.videoBuffer,"aw",@nobits
   6              		.align 8
   9              	videoBuffer:
  10 0000 00000000 		.zero	8
  10      00000000 
  11              		.globl	buttons
  12              		.section	.data.buttons,"aw"
  13              		.align 4
  16              	buttons:
  17 0000 FFFFFFFF 		.long	-1
  18              		.section	.bss.monitor,"aw",@nobits
  19              		.align 32
  22              	monitor:
  23 0000 00000000 		.zero	153624
  23      00000000 
  23      00000000 
  23      00000000 
  23      00000000 
  24              		.globl	m
  25              		.section	.data.rel.local.m,"aw"
  26              		.align 8
  29              	m:
  30 0000 00000000 		.quad	monitor
  30      00000000 
  31              		.section	.text.quit_filter,"ax",@progbits
  32              		.globl	quit_filter
  34              	quit_filter:
  35              	.LFB4015:
  36              		.file 1 "host/frame_buffer.c"
   1:host/frame_buffer.c **** #include <stdint.h>
   2:host/frame_buffer.c **** #include <stdbool.h>
   3:host/frame_buffer.c **** #include <SDL2/SDL.h>
   4:host/frame_buffer.c **** #include "myLib.h"
   5:host/frame_buffer.c **** #include <string.h>
   6:host/frame_buffer.c **** #include <assert.h>
   7:host/frame_buffer.c **** 
   8:host/frame_buffer.c **** typedef struct
   9:host/frame_buffer.c **** {
  10:host/frame_buffer.c ****     SDL_Window *window;
  11:host/frame_buffer.c ****     SDL_Renderer *renderer;
  12:host/frame_buffer.c ****     SDL_Texture *texture;
  13:host/frame_buffer.c ****     uint16_t tft_fb[ HEIGHT ][ WIDTH ];
  14:host/frame_buffer.c ****     uint16_t tft_fb1[ HEIGHT ][ WIDTH ];
  15:host/frame_buffer.c **** 
  16:host/frame_buffer.c **** } monitor_t;
  17:host/frame_buffer.c **** 
  18:host/frame_buffer.c **** uint16_t *videoBuffer;
  19:host/frame_buffer.c **** uint32_t buttons = ~( 0 );
  20:host/frame_buffer.c **** 
  21:host/frame_buffer.c **** 
  22:host/frame_buffer.c **** static monitor_t monitor = { 0 };
  23:host/frame_buffer.c **** monitor_t *m = &monitor;
  24:host/frame_buffer.c **** 
  25:host/frame_buffer.c **** int quit_filter(void *userdata, SDL_Event *event)
  26:host/frame_buffer.c **** {
  37              		.loc 1 26 1
  38              		.cfi_startproc
  39 0000 F30F1EFA 		endbr64
  40 0004 55       		pushq	%rbp
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 6, -16
  43 0005 4889E5   		movq	%rsp, %rbp
  44              		.cfi_def_cfa_register 6
  45 0008 4883EC10 		subq	$16, %rsp
  46 000c 48897DF8 		movq	%rdi, -8(%rbp)
  47 0010 488975F0 		movq	%rsi, -16(%rbp)
  27:host/frame_buffer.c ****     (void) userdata;
  28:host/frame_buffer.c **** 
  29:host/frame_buffer.c ****     if( SDL_WINDOWEVENT == event->type )
  48              		.loc 1 29 33
  49 0014 488B45F0 		movq	-16(%rbp), %rax
  50 0018 8B00     		movl	(%rax), %eax
  51              		.loc 1 29 7
  52 001a 3D000200 		cmpl	$512, %eax
  52      00
  53 001f 7516     		jne	.L2
  30:host/frame_buffer.c ****     {
  31:host/frame_buffer.c ****         if( SDL_WINDOWEVENT_CLOSE == event->window.event )
  54              		.loc 1 31 51
  55 0021 488B45F0 		movq	-16(%rbp), %rax
  56 0025 0FB6400C 		movzbl	12(%rax), %eax
  57              		.loc 1 31 11
  58 0029 3C0E     		cmpb	$14, %al
  59 002b 7521     		jne	.L3
  32:host/frame_buffer.c ****         {
  33:host/frame_buffer.c ****             exit( 0 );
  60              		.loc 1 33 13
  61 002d BF000000 		movl	$0, %edi
  61      00
  62 0032 E8000000 		call	exit@PLT
  62      00
  63              	.L2:
  34:host/frame_buffer.c ****         }
  35:host/frame_buffer.c ****     }
  36:host/frame_buffer.c ****     else if( SDL_QUIT == event->type )
  64              		.loc 1 36 31
  65 0037 488B45F0 		movq	-16(%rbp), %rax
  66 003b 8B00     		movl	(%rax), %eax
  67              		.loc 1 36 12
  68 003d 3D000100 		cmpl	$256, %eax
  68      00
  69 0042 750A     		jne	.L3
  37:host/frame_buffer.c ****     {
  38:host/frame_buffer.c ****         exit( 0 );
  70              		.loc 1 38 9
  71 0044 BF000000 		movl	$0, %edi
  71      00
  72 0049 E8000000 		call	exit@PLT
  72      00
  73              	.L3:
  39:host/frame_buffer.c ****     }
  40:host/frame_buffer.c **** 
  41:host/frame_buffer.c ****     return 1;
  74              		.loc 1 41 12
  75 004e B8010000 		movl	$1, %eax
  75      00
  42:host/frame_buffer.c **** }
  76              		.loc 1 42 1
  77 0053 C9       		leave
  78              		.cfi_def_cfa 7, 8
  79 0054 C3       		ret
  80              		.cfi_endproc
  81              	.LFE4015:
  83              		.section	.rodata
  84              		.align 8
  85              	.LC0:
  86 0000 53444C20 		.string	"SDL could not initialise! SDL_Error: %s\n"
  86      636F756C 
  86      64206E6F 
  86      7420696E 
  86      69746961 
  87              	.LC1:
  88 0029 53746172 		.string	"Starfighter"
  88      66696768 
  88      74657200 
  89              	.LC2:
  90 0035 686F7374 		.string	"host/frame_buffer.c"
  90      2F667261 
  90      6D655F62 
  90      75666665 
  90      722E6300 
  91              	.LC3:
  92 0049 6D2D3E77 		.string	"m->window"
  92      696E646F 
  92      7700
  93              	.LC4:
  94 0053 6D2D3E72 		.string	"m->renderer"
  94      656E6465 
  94      72657200 
  95              	.LC5:
  96 005f 6D2D3E74 		.string	"m->texture"
  96      65787475 
  96      726500
  97              		.section	.text.frame_buffer_init,"ax",@progbits
  98              		.globl	frame_buffer_init
 100              	frame_buffer_init:
 101              	.LFB4016:
  43:host/frame_buffer.c **** 
  44:host/frame_buffer.c **** volatile uint32_t* frame_buffer_init(void)
  45:host/frame_buffer.c **** {
 102              		.loc 1 45 1
 103              		.cfi_startproc
 104 0000 F30F1EFA 		endbr64
 105 0004 55       		pushq	%rbp
 106              		.cfi_def_cfa_offset 16
 107              		.cfi_offset 6, -16
 108 0005 4889E5   		movq	%rsp, %rbp
 109              		.cfi_def_cfa_register 6
 110 0008 53       		pushq	%rbx
 111 0009 4883EC08 		subq	$8, %rsp
 112              		.cfi_offset 3, -24
  46:host/frame_buffer.c ****     buttons = ~( 0 );
 113              		.loc 1 46 13
 114 000d C7050000 		movl	$-1, buttons(%rip)
 114      0000FFFF 
 114      FFFF
  47:host/frame_buffer.c ****     /* Initialise the SDL */
  48:host/frame_buffer.c ****     if( SDL_Init( SDL_INIT_VIDEO ) < 0 )
 115              		.loc 1 48 9
 116 0017 BF200000 		movl	$32, %edi
 116      00
 117 001c E8000000 		call	SDL_Init@PLT
 117      00
 118              		.loc 1 48 7
 119 0021 85C0     		testl	%eax, %eax
 120 0023 7923     		jns	.L6
  49:host/frame_buffer.c ****     {
  50:host/frame_buffer.c ****         printf( "SDL could not initialise! SDL_Error: %s\n", SDL_GetError() );
 121              		.loc 1 50 9
 122 0025 E8000000 		call	SDL_GetError@PLT
 122      00
 123 002a 4889C6   		movq	%rax, %rsi
 124 002d 488D3D00 		leaq	.LC0(%rip), %rdi
 124      000000
 125 0034 B8000000 		movl	$0, %eax
 125      00
 126 0039 E8000000 		call	printf@PLT
 126      00
  51:host/frame_buffer.c ****         exit( -1 );
 127              		.loc 1 51 9
 128 003e BFFFFFFF 		movl	$-1, %edi
 128      FF
 129 0043 E8000000 		call	exit@PLT
 129      00
 130              	.L6:
  52:host/frame_buffer.c ****     }
  53:host/frame_buffer.c **** 
  54:host/frame_buffer.c ****     SDL_SetEventFilter( quit_filter, NULL );
 131              		.loc 1 54 5
 132 0048 BE000000 		movl	$0, %esi
 132      00
 133 004d 488D3D00 		leaq	quit_filter(%rip), %rdi
 133      000000
 134 0054 E8000000 		call	SDL_SetEventFilter@PLT
 134      00
  55:host/frame_buffer.c **** 
  56:host/frame_buffer.c ****     m->window = SDL_CreateWindow( "Starfighter", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
 135              		.loc 1 56 6
 136 0059 488B1D00 		movq	m(%rip), %rbx
 136      000000
 137              		.loc 1 56 17
 138 0060 41B90000 		movl	$0, %r9d
 138      0000
 139 0066 41B8E001 		movl	$480, %r8d
 139      0000
 140 006c B9D00200 		movl	$720, %ecx
 140      00
 141 0071 BA0000FF 		movl	$536805376, %edx
 141      1F
 142 0076 BE0000FF 		movl	$536805376, %esi
 142      1F
 143 007b 488D3D00 		leaq	.LC1(%rip), %rdi
 143      000000
 144 0082 E8000000 		call	SDL_CreateWindow@PLT
 144      00
 145              		.loc 1 56 15
 146 0087 488903   		movq	%rax, (%rbx)
  57:host/frame_buffer.c ****                                   WIDTH*3, HEIGHT*3, 0 );
  58:host/frame_buffer.c ****     assert( m->window );
 147              		.loc 1 58 5
 148 008a 488B0500 		movq	m(%rip), %rax
 148      000000
 149 0091 488B00   		movq	(%rax), %rax
 150 0094 4885C0   		testq	%rax, %rax
 151 0097 751F     		jne	.L7
 152              		.loc 1 58 5 is_stmt 0 discriminator 1
 153 0099 488D0D00 		leaq	__PRETTY_FUNCTION__.29360(%rip), %rcx
 153      000000
 154 00a0 BA3A0000 		movl	$58, %edx
 154      00
 155 00a5 488D3500 		leaq	.LC2(%rip), %rsi
 155      000000
 156 00ac 488D3D00 		leaq	.LC3(%rip), %rdi
 156      000000
 157 00b3 E8000000 		call	__assert_fail@PLT
 157      00
 158              	.L7:
  59:host/frame_buffer.c **** 
  60:host/frame_buffer.c ****     m->renderer = SDL_CreateRenderer( m->window, -1, SDL_RENDERER_SOFTWARE );
 159              		.loc 1 60 40 is_stmt 1
 160 00b8 488B0500 		movq	m(%rip), %rax
 160      000000
 161              		.loc 1 60 19
 162 00bf 488B00   		movq	(%rax), %rax
 163              		.loc 1 60 6
 164 00c2 488B1D00 		movq	m(%rip), %rbx
 164      000000
 165              		.loc 1 60 19
 166 00c9 BA010000 		movl	$1, %edx
 166      00
 167 00ce BEFFFFFF 		movl	$-1, %esi
 167      FF
 168 00d3 4889C7   		movq	%rax, %rdi
 169 00d6 E8000000 		call	SDL_CreateRenderer@PLT
 169      00
 170              		.loc 1 60 17
 171 00db 48894308 		movq	%rax, 8(%rbx)
  61:host/frame_buffer.c ****     assert( m->renderer );
 172              		.loc 1 61 5
 173 00df 488B0500 		movq	m(%rip), %rax
 173      000000
 174 00e6 488B4008 		movq	8(%rax), %rax
 175 00ea 4885C0   		testq	%rax, %rax
 176 00ed 751F     		jne	.L8
 177              		.loc 1 61 5 is_stmt 0 discriminator 1
 178 00ef 488D0D00 		leaq	__PRETTY_FUNCTION__.29360(%rip), %rcx
 178      000000
 179 00f6 BA3D0000 		movl	$61, %edx
 179      00
 180 00fb 488D3500 		leaq	.LC2(%rip), %rsi
 180      000000
 181 0102 488D3D00 		leaq	.LC4(%rip), %rdi
 181      000000
 182 0109 E8000000 		call	__assert_fail@PLT
 182      00
 183              	.L8:
  62:host/frame_buffer.c **** 
  63:host/frame_buffer.c ****     m->texture = SDL_CreateTexture( m->renderer, SDL_PIXELFORMAT_BGR555, SDL_TEXTUREACCESS_STATIC,
 184              		.loc 1 63 38 is_stmt 1
 185 010e 488B0500 		movq	m(%rip), %rax
 185      000000
 186              		.loc 1 63 18
 187 0115 488B4008 		movq	8(%rax), %rax
 188              		.loc 1 63 6
 189 0119 488B1D00 		movq	m(%rip), %rbx
 189      000000
 190              		.loc 1 63 18
 191 0120 41B8A000 		movl	$160, %r8d
 191      0000
 192 0126 B9F00000 		movl	$240, %ecx
 192      00
 193 012b BA000000 		movl	$0, %edx
 193      00
 194 0130 BE020F53 		movl	$357764866, %esi
 194      15
 195 0135 4889C7   		movq	%rax, %rdi
 196 0138 E8000000 		call	SDL_CreateTexture@PLT
 196      00
 197              		.loc 1 63 16
 198 013d 48894310 		movq	%rax, 16(%rbx)
  64:host/frame_buffer.c ****                                     WIDTH, HEIGHT );
  65:host/frame_buffer.c ****     assert( m->texture );
 199              		.loc 1 65 5
 200 0141 488B0500 		movq	m(%rip), %rax
 200      000000
 201 0148 488B4010 		movq	16(%rax), %rax
 202 014c 4885C0   		testq	%rax, %rax
 203 014f 751F     		jne	.L9
 204              		.loc 1 65 5 is_stmt 0 discriminator 1
 205 0151 488D0D00 		leaq	__PRETTY_FUNCTION__.29360(%rip), %rcx
 205      000000
 206 0158 BA410000 		movl	$65, %edx
 206      00
 207 015d 488D3500 		leaq	.LC2(%rip), %rsi
 207      000000
 208 0164 488D3D00 		leaq	.LC5(%rip), %rdi
 208      000000
 209 016b E8000000 		call	__assert_fail@PLT
 209      00
 210              	.L9:
  66:host/frame_buffer.c **** 
  67:host/frame_buffer.c ****     SDL_SetTextureBlendMode( m->texture, SDL_BLENDMODE_BLEND );
 211              		.loc 1 67 31 is_stmt 1
 212 0170 488B0500 		movq	m(%rip), %rax
 212      000000
 213              		.loc 1 67 5
 214 0177 488B4010 		movq	16(%rax), %rax
 215 017b BE010000 		movl	$1, %esi
 215      00
 216 0180 4889C7   		movq	%rax, %rdi
 217 0183 E8000000 		call	SDL_SetTextureBlendMode@PLT
 217      00
  68:host/frame_buffer.c **** 
  69:host/frame_buffer.c ****     videoBuffer = &m->tft_fb[0][0];
 218              		.loc 1 69 21
 219 0188 488B0500 		movq	m(%rip), %rax
 219      000000
 220              		.loc 1 69 19
 221 018f 4883C018 		addq	$24, %rax
 222              		.loc 1 69 17
 223 0193 48890500 		movq	%rax, videoBuffer(%rip)
 223      000000
  70:host/frame_buffer.c **** 
  71:host/frame_buffer.c ****     return (void*) m->tft_fb;
 224              		.loc 1 71 21
 225 019a 488B0500 		movq	m(%rip), %rax
 225      000000
 226              		.loc 1 71 12
 227 01a1 4883C018 		addq	$24, %rax
  72:host/frame_buffer.c **** }
 228              		.loc 1 72 1
 229 01a5 4883C408 		addq	$8, %rsp
 230 01a9 5B       		popq	%rbx
 231 01aa 5D       		popq	%rbp
 232              		.cfi_def_cfa 7, 8
 233 01ab C3       		ret
 234              		.cfi_endproc
 235              	.LFE4016:
 237              		.section	.rodata
 238              	.LC6:
 239 006a 30203D3D 		.string	"0 == rslt"
 239      2072736C 
 239      7400
 240              		.section	.text.frame_buffer_switch,"ax",@progbits
 241              		.globl	frame_buffer_switch
 243              	frame_buffer_switch:
 244              	.LFB4017:
  73:host/frame_buffer.c **** 
  74:host/frame_buffer.c **** int frame_buffer_switch(int offset)
  75:host/frame_buffer.c **** {
 245              		.loc 1 75 1
 246              		.cfi_startproc
 247 0000 F30F1EFA 		endbr64
 248 0004 55       		pushq	%rbp
 249              		.cfi_def_cfa_offset 16
 250              		.cfi_offset 6, -16
 251 0005 4889E5   		movq	%rsp, %rbp
 252              		.cfi_def_cfa_register 6
 253 0008 4883EC20 		subq	$32, %rsp
 254 000c 897DEC   		movl	%edi, -20(%rbp)
  76:host/frame_buffer.c ****     (void) offset;
  77:host/frame_buffer.c **** 
  78:host/frame_buffer.c ****     int rslt = SDL_UpdateTexture( m->texture, NULL, m->tft_fb, WIDTH * sizeof( uint16_t ));
 255              		.loc 1 78 54
 256 000f 488B0500 		movq	m(%rip), %rax
 256      000000
 257 0016 488D5018 		leaq	24(%rax), %rdx
 258              		.loc 1 78 36
 259 001a 488B0500 		movq	m(%rip), %rax
 259      000000
 260              		.loc 1 78 16
 261 0021 488B4010 		movq	16(%rax), %rax
 262 0025 B9E00100 		movl	$480, %ecx
 262      00
 263 002a BE000000 		movl	$0, %esi
 263      00
 264 002f 4889C7   		movq	%rax, %rdi
 265 0032 E8000000 		call	SDL_UpdateTexture@PLT
 265      00
 266 0037 8945FC   		movl	%eax, -4(%rbp)
  79:host/frame_buffer.c ****     assert( 0 == rslt );
 267              		.loc 1 79 5
 268 003a 837DFC00 		cmpl	$0, -4(%rbp)
 269 003e 741F     		je	.L12
 270              		.loc 1 79 5 is_stmt 0 discriminator 1
 271 0040 488D0D00 		leaq	__PRETTY_FUNCTION__.29365(%rip), %rcx
 271      000000
 272 0047 BA4F0000 		movl	$79, %edx
 272      00
 273 004c 488D3500 		leaq	.LC2(%rip), %rsi
 273      000000
 274 0053 488D3D00 		leaq	.LC6(%rip), %rdi
 274      000000
 275 005a E8000000 		call	__assert_fail@PLT
 275      00
 276              	.L12:
  80:host/frame_buffer.c ****     rslt = SDL_RenderClear( m->renderer );
 277              		.loc 1 80 30 is_stmt 1
 278 005f 488B0500 		movq	m(%rip), %rax
 278      000000
 279              		.loc 1 80 12
 280 0066 488B4008 		movq	8(%rax), %rax
 281 006a 4889C7   		movq	%rax, %rdi
 282 006d E8000000 		call	SDL_RenderClear@PLT
 282      00
 283 0072 8945FC   		movl	%eax, -4(%rbp)
  81:host/frame_buffer.c ****     assert( 0 == rslt );
 284              		.loc 1 81 5
 285 0075 837DFC00 		cmpl	$0, -4(%rbp)
 286 0079 741F     		je	.L13
 287              		.loc 1 81 5 is_stmt 0 discriminator 1
 288 007b 488D0D00 		leaq	__PRETTY_FUNCTION__.29365(%rip), %rcx
 288      000000
 289 0082 BA510000 		movl	$81, %edx
 289      00
 290 0087 488D3500 		leaq	.LC2(%rip), %rsi
 290      000000
 291 008e 488D3D00 		leaq	.LC6(%rip), %rdi
 291      000000
 292 0095 E8000000 		call	__assert_fail@PLT
 292      00
 293              	.L13:
  82:host/frame_buffer.c **** 
  83:host/frame_buffer.c ****     /* Update the renderer with the texture containing the rendered image */
  84:host/frame_buffer.c ****     rslt = SDL_RenderCopy( m->renderer, m->texture, NULL, NULL );
 294              		.loc 1 84 42 is_stmt 1
 295 009a 488B0500 		movq	m(%rip), %rax
 295      000000
 296              		.loc 1 84 12
 297 00a1 488B7010 		movq	16(%rax), %rsi
 298              		.loc 1 84 29
 299 00a5 488B0500 		movq	m(%rip), %rax
 299      000000
 300              		.loc 1 84 12
 301 00ac 488B4008 		movq	8(%rax), %rax
 302 00b0 B9000000 		movl	$0, %ecx
 302      00
 303 00b5 BA000000 		movl	$0, %edx
 303      00
 304 00ba 4889C7   		movq	%rax, %rdi
 305 00bd E8000000 		call	SDL_RenderCopy@PLT
 305      00
 306 00c2 8945FC   		movl	%eax, -4(%rbp)
  85:host/frame_buffer.c ****     assert( 0 == rslt );
 307              		.loc 1 85 5
 308 00c5 837DFC00 		cmpl	$0, -4(%rbp)
 309 00c9 741F     		je	.L14
 310              		.loc 1 85 5 is_stmt 0 discriminator 1
 311 00cb 488D0D00 		leaq	__PRETTY_FUNCTION__.29365(%rip), %rcx
 311      000000
 312 00d2 BA550000 		movl	$85, %edx
 312      00
 313 00d7 488D3500 		leaq	.LC2(%rip), %rsi
 313      000000
 314 00de 488D3D00 		leaq	.LC6(%rip), %rdi
 314      000000
 315 00e5 E8000000 		call	__assert_fail@PLT
 315      00
 316              	.L14:
  86:host/frame_buffer.c **** 
  87:host/frame_buffer.c ****     SDL_RenderPresent( m->renderer );
 317              		.loc 1 87 25 is_stmt 1
 318 00ea 488B0500 		movq	m(%rip), %rax
 318      000000
 319              		.loc 1 87 5
 320 00f1 488B4008 		movq	8(%rax), %rax
 321 00f5 4889C7   		movq	%rax, %rdi
 322 00f8 E8000000 		call	SDL_RenderPresent@PLT
 322      00
  88:host/frame_buffer.c **** 
  89:host/frame_buffer.c ****     return 0;
 323              		.loc 1 89 12
 324 00fd B8000000 		movl	$0, %eax
 324      00
  90:host/frame_buffer.c **** }
 325              		.loc 1 90 1
 326 0102 C9       		leave
 327              		.cfi_def_cfa 7, 8
 328 0103 C3       		ret
 329              		.cfi_endproc
 330              	.LFE4017:
 332              		.section	.text.setPixel,"ax",@progbits
 333              		.globl	setPixel
 335              	setPixel:
 336              	.LFB4018:
  91:host/frame_buffer.c **** 
  92:host/frame_buffer.c **** void setPixel(int row, int col, unsigned short color)
  93:host/frame_buffer.c **** {
 337              		.loc 1 93 1
 338              		.cfi_startproc
 339 0000 F30F1EFA 		endbr64
 340 0004 55       		pushq	%rbp
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 6, -16
 343 0005 4889E5   		movq	%rsp, %rbp
 344              		.cfi_def_cfa_register 6
 345 0008 897DFC   		movl	%edi, -4(%rbp)
 346 000b 8975F8   		movl	%esi, -8(%rbp)
 347 000e 89D0     		movl	%edx, %eax
 348 0010 668945F4 		movw	%ax, -12(%rbp)
  94:host/frame_buffer.c ****     m->tft_fb[ col ][ row ] = color;
 349              		.loc 1 94 6
 350 0014 488B0D00 		movq	m(%rip), %rcx
 350      000000
 351              		.loc 1 94 29
 352 001b 8B45FC   		movl	-4(%rbp), %eax
 353 001e 4863F0   		movslq	%eax, %rsi
 354 0021 8B45F8   		movl	-8(%rbp), %eax
 355 0024 4863D0   		movslq	%eax, %rdx
 356 0027 4889D0   		movq	%rdx, %rax
 357 002a 48C1E004 		salq	$4, %rax
 358 002e 4829D0   		subq	%rdx, %rax
 359 0031 48C1E004 		salq	$4, %rax
 360 0035 4801F0   		addq	%rsi, %rax
 361 0038 488D5008 		leaq	8(%rax), %rdx
 362 003c 0FB745F4 		movzwl	-12(%rbp), %eax
 363 0040 66894451 		movw	%ax, 8(%rcx,%rdx,2)
 363      08
  95:host/frame_buffer.c **** }
 364              		.loc 1 95 1
 365 0045 90       		nop
 366 0046 5D       		popq	%rbp
 367              		.cfi_def_cfa 7, 8
 368 0047 C3       		ret
 369              		.cfi_endproc
 370              	.LFE4018:
 372              		.section	.text.drawRectangle,"ax",@progbits
 373              		.globl	drawRectangle
 375              	drawRectangle:
 376              	.LFB4019:
  96:host/frame_buffer.c **** 
  97:host/frame_buffer.c **** void drawRectangle(int row, int col, int height, int width, unsigned short color)
  98:host/frame_buffer.c **** {
 377              		.loc 1 98 1
 378              		.cfi_startproc
 379 0000 F30F1EFA 		endbr64
 380 0004 55       		pushq	%rbp
 381              		.cfi_def_cfa_offset 16
 382              		.cfi_offset 6, -16
 383 0005 4889E5   		movq	%rsp, %rbp
 384              		.cfi_def_cfa_register 6
 385 0008 897DEC   		movl	%edi, -20(%rbp)
 386 000b 8975E8   		movl	%esi, -24(%rbp)
 387 000e 8955E4   		movl	%edx, -28(%rbp)
 388 0011 894DE0   		movl	%ecx, -32(%rbp)
 389 0014 4489C0   		movl	%r8d, %eax
 390 0017 668945DC 		movw	%ax, -36(%rbp)
  99:host/frame_buffer.c ****     int endw = row + width;
 391              		.loc 1 99 9
 392 001b 8B55EC   		movl	-20(%rbp), %edx
 393 001e 8B45E0   		movl	-32(%rbp), %eax
 394 0021 01D0     		addl	%edx, %eax
 395 0023 8945F0   		movl	%eax, -16(%rbp)
 100:host/frame_buffer.c ****     int endh = col + height;
 396              		.loc 1 100 9
 397 0026 8B55E8   		movl	-24(%rbp), %edx
 398 0029 8B45E4   		movl	-28(%rbp), %eax
 399 002c 01D0     		addl	%edx, %eax
 400 002e 8945F4   		movl	%eax, -12(%rbp)
 101:host/frame_buffer.c ****     if( endw > WIDTH )
 401              		.loc 1 101 7
 402 0031 817DF0F0 		cmpl	$240, -16(%rbp)
 402      000000
 403 0038 7E07     		jle	.L18
 102:host/frame_buffer.c ****     {
 103:host/frame_buffer.c ****         endw = WIDTH;
 404              		.loc 1 103 14
 405 003a C745F0F0 		movl	$240, -16(%rbp)
 405      000000
 406              	.L18:
 104:host/frame_buffer.c ****     }
 105:host/frame_buffer.c ****     if( endh > HEIGHT )
 407              		.loc 1 105 7
 408 0041 817DF4A0 		cmpl	$160, -12(%rbp)
 408      000000
 409 0048 7E07     		jle	.L19
 106:host/frame_buffer.c ****     {
 107:host/frame_buffer.c ****         endh = HEIGHT;
 410              		.loc 1 107 14
 411 004a C745F4A0 		movl	$160, -12(%rbp)
 411      000000
 412              	.L19:
 413              	.LBB2:
 108:host/frame_buffer.c ****     }
 109:host/frame_buffer.c **** 
 110:host/frame_buffer.c ****     for( int h = col; h < endh; h++ )
 414              		.loc 1 110 14
 415 0051 8B45E8   		movl	-24(%rbp), %eax
 416 0054 8945F8   		movl	%eax, -8(%rbp)
 417              		.loc 1 110 5
 418 0057 EB49     		jmp	.L20
 419              	.L23:
 420              	.LBB3:
 111:host/frame_buffer.c ****     {
 112:host/frame_buffer.c ****         for( int w = row; w < endw; w++ )
 421              		.loc 1 112 18
 422 0059 8B45EC   		movl	-20(%rbp), %eax
 423 005c 8945FC   		movl	%eax, -4(%rbp)
 424              		.loc 1 112 9
 425 005f EB35     		jmp	.L21
 426              	.L22:
 113:host/frame_buffer.c ****         {
 114:host/frame_buffer.c ****             m->tft_fb[ h ][ w ] = color;
 427              		.loc 1 114 14 discriminator 3
 428 0061 488B0D00 		movq	m(%rip), %rcx
 428      000000
 429              		.loc 1 114 33 discriminator 3
 430 0068 8B45FC   		movl	-4(%rbp), %eax
 431 006b 4863F0   		movslq	%eax, %rsi
 432 006e 8B45F8   		movl	-8(%rbp), %eax
 433 0071 4863D0   		movslq	%eax, %rdx
 434 0074 4889D0   		movq	%rdx, %rax
 435 0077 48C1E004 		salq	$4, %rax
 436 007b 4829D0   		subq	%rdx, %rax
 437 007e 48C1E004 		salq	$4, %rax
 438 0082 4801F0   		addq	%rsi, %rax
 439 0085 488D5008 		leaq	8(%rax), %rdx
 440 0089 0FB745DC 		movzwl	-36(%rbp), %eax
 441 008d 66894451 		movw	%ax, 8(%rcx,%rdx,2)
 441      08
 112:host/frame_buffer.c ****         {
 442              		.loc 1 112 38 discriminator 3
 443 0092 8345FC01 		addl	$1, -4(%rbp)
 444              	.L21:
 112:host/frame_buffer.c ****         {
 445              		.loc 1 112 9 discriminator 1
 446 0096 8B45FC   		movl	-4(%rbp), %eax
 447 0099 3B45F0   		cmpl	-16(%rbp), %eax
 448 009c 7CC3     		jl	.L22
 449              	.LBE3:
 110:host/frame_buffer.c ****     {
 450              		.loc 1 110 34 discriminator 2
 451 009e 8345F801 		addl	$1, -8(%rbp)
 452              	.L20:
 110:host/frame_buffer.c ****     {
 453              		.loc 1 110 5 discriminator 1
 454 00a2 8B45F8   		movl	-8(%rbp), %eax
 455 00a5 3B45F4   		cmpl	-12(%rbp), %eax
 456 00a8 7CAF     		jl	.L23
 457              	.LBE2:
 115:host/frame_buffer.c ****         }
 116:host/frame_buffer.c ****     }
 117:host/frame_buffer.c **** }
 458              		.loc 1 117 1
 459 00aa 90       		nop
 460 00ab 90       		nop
 461 00ac 5D       		popq	%rbp
 462              		.cfi_def_cfa 7, 8
 463 00ad C3       		ret
 464              		.cfi_endproc
 465              	.LFE4019:
 467              		.section	.text.background_color,"ax",@progbits
 468              		.globl	background_color
 470              	background_color:
 471              	.LFB4020:
 118:host/frame_buffer.c **** 
 119:host/frame_buffer.c **** void background_color(int height, int width, unsigned short color)
 120:host/frame_buffer.c **** {
 472              		.loc 1 120 1
 473              		.cfi_startproc
 474 0000 F30F1EFA 		endbr64
 475 0004 55       		pushq	%rbp
 476              		.cfi_def_cfa_offset 16
 477              		.cfi_offset 6, -16
 478 0005 4889E5   		movq	%rsp, %rbp
 479              		.cfi_def_cfa_register 6
 480 0008 897DEC   		movl	%edi, -20(%rbp)
 481 000b 8975E8   		movl	%esi, -24(%rbp)
 482 000e 89D0     		movl	%edx, %eax
 483 0010 668945E4 		movw	%ax, -28(%rbp)
 484              	.LBB4:
 121:host/frame_buffer.c ****     for( int h = 0; h < height; h++ )
 485              		.loc 1 121 14
 486 0014 C745F800 		movl	$0, -8(%rbp)
 486      000000
 487              		.loc 1 121 5
 488 001b EB4A     		jmp	.L25
 489              	.L28:
 490              	.LBB5:
 122:host/frame_buffer.c ****     {
 123:host/frame_buffer.c ****         for( int w = 0; w < width; w++ )
 491              		.loc 1 123 18
 492 001d C745FC00 		movl	$0, -4(%rbp)
 492      000000
 493              		.loc 1 123 9
 494 0024 EB35     		jmp	.L26
 495              	.L27:
 124:host/frame_buffer.c ****         {
 125:host/frame_buffer.c ****             m->tft_fb[ h ][ w ] = color;
 496              		.loc 1 125 14 discriminator 3
 497 0026 488B0D00 		movq	m(%rip), %rcx
 497      000000
 498              		.loc 1 125 33 discriminator 3
 499 002d 8B45FC   		movl	-4(%rbp), %eax
 500 0030 4863F0   		movslq	%eax, %rsi
 501 0033 8B45F8   		movl	-8(%rbp), %eax
 502 0036 4863D0   		movslq	%eax, %rdx
 503 0039 4889D0   		movq	%rdx, %rax
 504 003c 48C1E004 		salq	$4, %rax
 505 0040 4829D0   		subq	%rdx, %rax
 506 0043 48C1E004 		salq	$4, %rax
 507 0047 4801F0   		addq	%rsi, %rax
 508 004a 488D5008 		leaq	8(%rax), %rdx
 509 004e 0FB745E4 		movzwl	-28(%rbp), %eax
 510 0052 66894451 		movw	%ax, 8(%rcx,%rdx,2)
 510      08
 123:host/frame_buffer.c ****         {
 511              		.loc 1 123 37 discriminator 3
 512 0057 8345FC01 		addl	$1, -4(%rbp)
 513              	.L26:
 123:host/frame_buffer.c ****         {
 514              		.loc 1 123 9 discriminator 1
 515 005b 8B45FC   		movl	-4(%rbp), %eax
 516 005e 3B45E8   		cmpl	-24(%rbp), %eax
 517 0061 7CC3     		jl	.L27
 518              	.LBE5:
 121:host/frame_buffer.c ****     {
 519              		.loc 1 121 34 discriminator 2
 520 0063 8345F801 		addl	$1, -8(%rbp)
 521              	.L25:
 121:host/frame_buffer.c ****     {
 522              		.loc 1 121 5 discriminator 1
 523 0067 8B45F8   		movl	-8(%rbp), %eax
 524 006a 3B45EC   		cmpl	-20(%rbp), %eax
 525 006d 7CAE     		jl	.L28
 526              	.LBE4:
 126:host/frame_buffer.c ****         }
 127:host/frame_buffer.c ****     }
 128:host/frame_buffer.c **** }
 527              		.loc 1 128 1
 528 006f 90       		nop
 529 0070 90       		nop
 530 0071 5D       		popq	%rbp
 531              		.cfi_def_cfa 7, 8
 532 0072 C3       		ret
 533              		.cfi_endproc
 534              	.LFE4020:
 536              		.section	.text.drawScreen,"ax",@progbits
 537              		.globl	drawScreen
 539              	drawScreen:
 540              	.LFB4021:
 129:host/frame_buffer.c **** 
 130:host/frame_buffer.c **** void drawScreen(const unsigned short *image)
 131:host/frame_buffer.c **** {
 541              		.loc 1 131 1
 542              		.cfi_startproc
 543 0000 F30F1EFA 		endbr64
 544 0004 55       		pushq	%rbp
 545              		.cfi_def_cfa_offset 16
 546              		.cfi_offset 6, -16
 547 0005 4889E5   		movq	%rsp, %rbp
 548              		.cfi_def_cfa_register 6
 549 0008 4883EC10 		subq	$16, %rsp
 550 000c 48897DF8 		movq	%rdi, -8(%rbp)
 132:host/frame_buffer.c ****     memcpy( m->tft_fb, image, sizeof( m->tft_fb ));
 551              		.loc 1 132 14
 552 0010 488B0500 		movq	m(%rip), %rax
 552      000000
 553 0017 488D4818 		leaq	24(%rax), %rcx
 554              		.loc 1 132 5
 555 001b 488B45F8 		movq	-8(%rbp), %rax
 556 001f BA002C01 		movl	$76800, %edx
 556      00
 557 0024 4889C6   		movq	%rax, %rsi
 558 0027 4889CF   		movq	%rcx, %rdi
 559 002a E8000000 		call	memcpy@PLT
 559      00
 133:host/frame_buffer.c **** }
 560              		.loc 1 133 1
 561 002f 90       		nop
 562 0030 C9       		leave
 563              		.cfi_def_cfa 7, 8
 564 0031 C3       		ret
 565              		.cfi_endproc
 566              	.LFE4021:
 568              		.section	.text.fillinScreen,"ax",@progbits
 569              		.globl	fillinScreen
 571              	fillinScreen:
 572              	.LFB4022:
 134:host/frame_buffer.c **** 
 135:host/frame_buffer.c **** void fillinScreen(volatile unsigned short color)
 136:host/frame_buffer.c **** {
 573              		.loc 1 136 1
 574              		.cfi_startproc
 575 0000 F30F1EFA 		endbr64
 576 0004 55       		pushq	%rbp
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 6, -16
 579 0005 4889E5   		movq	%rsp, %rbp
 580              		.cfi_def_cfa_register 6
 581 0008 4883EC08 		subq	$8, %rsp
 582 000c 89F8     		movl	%edi, %eax
 583 000e 668945FC 		movw	%ax, -4(%rbp)
 137:host/frame_buffer.c ****     background_color( HEIGHT, WIDTH, color );
 584              		.loc 1 137 5
 585 0012 0FB745FC 		movzwl	-4(%rbp), %eax
 586 0016 0FB7C0   		movzwl	%ax, %eax
 587 0019 89C2     		movl	%eax, %edx
 588 001b BEF00000 		movl	$240, %esi
 588      00
 589 0020 BFA00000 		movl	$160, %edi
 589      00
 590 0025 E8000000 		call	background_color
 590      00
 138:host/frame_buffer.c **** }
 591              		.loc 1 138 1
 592 002a 90       		nop
 593 002b C9       		leave
 594              		.cfi_def_cfa 7, 8
 595 002c C3       		ret
 596              		.cfi_endproc
 597              	.LFE4022:
 599              		.section	.text.drawImage3,"ax",@progbits
 600              		.globl	drawImage3
 602              	drawImage3:
 603              	.LFB4023:
 139:host/frame_buffer.c **** 
 140:host/frame_buffer.c **** void drawImage3(int row, int col, int width, int height, const unsigned short *image)
 141:host/frame_buffer.c **** {
 604              		.loc 1 141 1
 605              		.cfi_startproc
 606 0000 F30F1EFA 		endbr64
 607 0004 55       		pushq	%rbp
 608              		.cfi_def_cfa_offset 16
 609              		.cfi_offset 6, -16
 610 0005 4889E5   		movq	%rsp, %rbp
 611              		.cfi_def_cfa_register 6
 612 0008 897DEC   		movl	%edi, -20(%rbp)
 613 000b 8975E8   		movl	%esi, -24(%rbp)
 614 000e 8955E4   		movl	%edx, -28(%rbp)
 615 0011 894DE0   		movl	%ecx, -32(%rbp)
 616 0014 4C8945D8 		movq	%r8, -40(%rbp)
 617              	.LBB6:
 142:host/frame_buffer.c ****     for( int c = 0; c < height; c++ )
 618              		.loc 1 142 14
 619 0018 C745F800 		movl	$0, -8(%rbp)
 619      000000
 620              		.loc 1 142 5
 621 001f EB5E     		jmp	.L32
 622              	.L35:
 623              	.LBB7:
 143:host/frame_buffer.c ****     {
 144:host/frame_buffer.c ****         for( int r = 0; r < width; r++ )
 624              		.loc 1 144 18
 625 0021 C745FC00 		movl	$0, -4(%rbp)
 625      000000
 626              		.loc 1 144 9
 627 0028 EB49     		jmp	.L33
 628              	.L34:
 145:host/frame_buffer.c ****         {
 146:host/frame_buffer.c ****             m->tft_fb[ col + c ][ row + r ] = *image;
 629              		.loc 1 146 14 discriminator 3
 630 002a 488B0D00 		movq	m(%rip), %rcx
 630      000000
 631              		.loc 1 146 28 discriminator 3
 632 0031 8B55E8   		movl	-24(%rbp), %edx
 633 0034 8B45F8   		movl	-8(%rbp), %eax
 634 0037 448D0402 		leal	(%rdx,%rax), %r8d
 635              		.loc 1 146 39 discriminator 3
 636 003b 8B55EC   		movl	-20(%rbp), %edx
 637 003e 8B45FC   		movl	-4(%rbp), %eax
 638 0041 01C2     		addl	%eax, %edx
 639              		.loc 1 146 47 discriminator 3
 640 0043 488B45D8 		movq	-40(%rbp), %rax
 641 0047 0FB730   		movzwl	(%rax), %esi
 642              		.loc 1 146 45 discriminator 3
 643 004a 4863FA   		movslq	%edx, %rdi
 644 004d 4963D0   		movslq	%r8d, %rdx
 645 0050 4889D0   		movq	%rdx, %rax
 646 0053 48C1E004 		salq	$4, %rax
 647 0057 4829D0   		subq	%rdx, %rax
 648 005a 48C1E004 		salq	$4, %rax
 649 005e 4801F8   		addq	%rdi, %rax
 650 0061 4883C008 		addq	$8, %rax
 651 0065 66897441 		movw	%si, 8(%rcx,%rax,2)
 651      08
 147:host/frame_buffer.c ****             image++;
 652              		.loc 1 147 18 discriminator 3
 653 006a 488345D8 		addq	$2, -40(%rbp)
 653      02
 144:host/frame_buffer.c ****         {
 654              		.loc 1 144 37 discriminator 3
 655 006f 8345FC01 		addl	$1, -4(%rbp)
 656              	.L33:
 144:host/frame_buffer.c ****         {
 657              		.loc 1 144 9 discriminator 1
 658 0073 8B45FC   		movl	-4(%rbp), %eax
 659 0076 3B45E4   		cmpl	-28(%rbp), %eax
 660 0079 7CAF     		jl	.L34
 661              	.LBE7:
 142:host/frame_buffer.c ****     {
 662              		.loc 1 142 34 discriminator 2
 663 007b 8345F801 		addl	$1, -8(%rbp)
 664              	.L32:
 142:host/frame_buffer.c ****     {
 665              		.loc 1 142 5 discriminator 1
 666 007f 8B45F8   		movl	-8(%rbp), %eax
 667 0082 3B45E0   		cmpl	-32(%rbp), %eax
 668 0085 7C9A     		jl	.L35
 669              	.LBE6:
 148:host/frame_buffer.c ****         }
 149:host/frame_buffer.c ****     }
 150:host/frame_buffer.c **** }
 670              		.loc 1 150 1
 671 0087 90       		nop
 672 0088 90       		nop
 673 0089 5D       		popq	%rbp
 674              		.cfi_def_cfa 7, 8
 675 008a C3       		ret
 676              		.cfi_endproc
 677              	.LFE4023:
 679              		.section	.text.undrawImage3,"ax",@progbits
 680              		.globl	undrawImage3
 682              	undrawImage3:
 683              	.LFB4024:
 151:host/frame_buffer.c **** void undrawImage3(int row, int col, int width, int height, const uint16_t *image)
 152:host/frame_buffer.c **** {
 684              		.loc 1 152 1
 685              		.cfi_startproc
 686 0000 F30F1EFA 		endbr64
 687 0004 55       		pushq	%rbp
 688              		.cfi_def_cfa_offset 16
 689              		.cfi_offset 6, -16
 690 0005 4889E5   		movq	%rsp, %rbp
 691              		.cfi_def_cfa_register 6
 692 0008 897DEC   		movl	%edi, -20(%rbp)
 693 000b 8975E8   		movl	%esi, -24(%rbp)
 694 000e 8955E4   		movl	%edx, -28(%rbp)
 695 0011 894DE0   		movl	%ecx, -32(%rbp)
 696 0014 4C8945D8 		movq	%r8, -40(%rbp)
 697              	.LBB8:
 153:host/frame_buffer.c ****     for( int c = 0; c < height; ++c )
 698              		.loc 1 153 14
 699 0018 C745F000 		movl	$0, -16(%rbp)
 699      000000
 700              		.loc 1 153 5
 701 001f E9820000 		jmp	.L37
 701      00
 702              	.L40:
 703              	.LBB9:
 154:host/frame_buffer.c ****     {
 155:host/frame_buffer.c ****         uint16_t *src = (uint16_t*)image;
 704              		.loc 1 155 19
 705 0024 488B45D8 		movq	-40(%rbp), %rax
 706 0028 488945F8 		movq	%rax, -8(%rbp)
 156:host/frame_buffer.c ****         src += OFFSET( row, c + col, WIDTH );
 707              		.loc 1 156 16
 708 002c 8B45EC   		movl	-20(%rbp), %eax
 709 002f 69C0F000 		imull	$240, %eax, %eax
 709      0000
 710 0035 8B4DF0   		movl	-16(%rbp), %ecx
 711 0038 8B55E8   		movl	-24(%rbp), %edx
 712 003b 01CA     		addl	%ecx, %edx
 713 003d 01D0     		addl	%edx, %eax
 714 003f 4898     		cltq
 715              		.loc 1 156 13
 716 0041 4801C0   		addq	%rax, %rax
 717 0044 480145F8 		addq	%rax, -8(%rbp)
 718              	.LBB10:
 157:host/frame_buffer.c ****         for( int r = 0; r < width; r++ )
 719              		.loc 1 157 18
 720 0048 C745F400 		movl	$0, -12(%rbp)
 720      000000
 721              		.loc 1 157 9
 722 004f EB49     		jmp	.L38
 723              	.L39:
 158:host/frame_buffer.c ****         {
 159:host/frame_buffer.c ****             m->tft_fb[ col + c ][ row + r ] = *src;
 724              		.loc 1 159 14 discriminator 3
 725 0051 488B0D00 		movq	m(%rip), %rcx
 725      000000
 726              		.loc 1 159 28 discriminator 3
 727 0058 8B55E8   		movl	-24(%rbp), %edx
 728 005b 8B45F0   		movl	-16(%rbp), %eax
 729 005e 448D0402 		leal	(%rdx,%rax), %r8d
 730              		.loc 1 159 39 discriminator 3
 731 0062 8B55EC   		movl	-20(%rbp), %edx
 732 0065 8B45F4   		movl	-12(%rbp), %eax
 733 0068 01C2     		addl	%eax, %edx
 734              		.loc 1 159 47 discriminator 3
 735 006a 488B45F8 		movq	-8(%rbp), %rax
 736 006e 0FB730   		movzwl	(%rax), %esi
 737              		.loc 1 159 45 discriminator 3
 738 0071 4863FA   		movslq	%edx, %rdi
 739 0074 4963D0   		movslq	%r8d, %rdx
 740 0077 4889D0   		movq	%rdx, %rax
 741 007a 48C1E004 		salq	$4, %rax
 742 007e 4829D0   		subq	%rdx, %rax
 743 0081 48C1E004 		salq	$4, %rax
 744 0085 4801F8   		addq	%rdi, %rax
 745 0088 4883C008 		addq	$8, %rax
 746 008c 66897441 		movw	%si, 8(%rcx,%rax,2)
 746      08
 160:host/frame_buffer.c ****             src++;
 747              		.loc 1 160 16 discriminator 3
 748 0091 488345F8 		addq	$2, -8(%rbp)
 748      02
 157:host/frame_buffer.c ****         for( int r = 0; r < width; r++ )
 749              		.loc 1 157 37 discriminator 3
 750 0096 8345F401 		addl	$1, -12(%rbp)
 751              	.L38:
 157:host/frame_buffer.c ****         for( int r = 0; r < width; r++ )
 752              		.loc 1 157 9 discriminator 1
 753 009a 8B45F4   		movl	-12(%rbp), %eax
 754 009d 3B45E4   		cmpl	-28(%rbp), %eax
 755 00a0 7CAF     		jl	.L39
 756              	.LBE10:
 757              	.LBE9:
 153:host/frame_buffer.c ****     {
 758              		.loc 1 153 33 discriminator 2
 759 00a2 8345F001 		addl	$1, -16(%rbp)
 760              	.L37:
 153:host/frame_buffer.c ****     {
 761              		.loc 1 153 5 discriminator 1
 762 00a6 8B45F0   		movl	-16(%rbp), %eax
 763 00a9 3B45E0   		cmpl	-32(%rbp), %eax
 764 00ac 0F8C72FF 		jl	.L40
 764      FFFF
 765              	.LBE8:
 161:host/frame_buffer.c ****         }
 162:host/frame_buffer.c ****     }
 163:host/frame_buffer.c **** }
 766              		.loc 1 163 1
 767 00b2 90       		nop
 768 00b3 90       		nop
 769 00b4 5D       		popq	%rbp
 770              		.cfi_def_cfa 7, 8
 771 00b5 C3       		ret
 772              		.cfi_endproc
 773              	.LFE4024:
 775              		.globl	print
 776              		.section	.bss.print,"aw",@nobits
 779              	print:
 780 0000 00       		.zero	1
 781              		.section	.text.drawImage3FromRow,"ax",@progbits
 782              		.globl	drawImage3FromRow
 784              	drawImage3FromRow:
 785              	.LFB4025:
 164:host/frame_buffer.c **** 
 165:host/frame_buffer.c **** bool print = false;
 166:host/frame_buffer.c **** /**
 167:host/frame_buffer.c ****  * draw a partial image
 168:host/frame_buffer.c ****  *
 169:host/frame_buffer.c ****  * @param r - x start position
 170:host/frame_buffer.c ****  * @param c - y start position
 171:host/frame_buffer.c ****  * @param rowOffset - offset in image to draw from
 172:host/frame_buffer.c ****  * @param width - image x length
 173:host/frame_buffer.c ****  * @param height - image column height
 174:host/frame_buffer.c ****  * @param image - image
 175:host/frame_buffer.c ****  */
 176:host/frame_buffer.c **** void drawImage3FromRow(int r, int c, int rowOffset, int width, int height, const uint16_t *image)
 177:host/frame_buffer.c **** {
 786              		.loc 1 177 1
 787              		.cfi_startproc
 788 0000 F30F1EFA 		endbr64
 789 0004 55       		pushq	%rbp
 790              		.cfi_def_cfa_offset 16
 791              		.cfi_offset 6, -16
 792 0005 4889E5   		movq	%rsp, %rbp
 793              		.cfi_def_cfa_register 6
 794 0008 897DEC   		movl	%edi, -20(%rbp)
 795 000b 8975E8   		movl	%esi, -24(%rbp)
 796 000e 8955E4   		movl	%edx, -28(%rbp)
 797 0011 894DE0   		movl	%ecx, -32(%rbp)
 798 0014 448945DC 		movl	%r8d, -36(%rbp)
 799 0018 4C894DD0 		movq	%r9, -48(%rbp)
 800              	.LBB11:
 178:host/frame_buffer.c ****     for( int cnt = 0; cnt < height; cnt++ )
 801              		.loc 1 178 14
 802 001c C745F400 		movl	$0, -12(%rbp)
 802      000000
 803              		.loc 1 178 5
 804 0023 EB74     		jmp	.L42
 805              	.L45:
 806              	.LBB12:
 179:host/frame_buffer.c ****     {
 180:host/frame_buffer.c ****         for( int row = rowOffset, pos = 0; row < width; ++row, ++pos )
 807              		.loc 1 180 18
 808 0025 8B45E4   		movl	-28(%rbp), %eax
 809 0028 8945F8   		movl	%eax, -8(%rbp)
 810              		.loc 1 180 35
 811 002b C745FC00 		movl	$0, -4(%rbp)
 811      000000
 812              		.loc 1 180 9
 813 0032 EB4D     		jmp	.L43
 814              	.L44:
 181:host/frame_buffer.c ****         {
 182:host/frame_buffer.c ****             m->tft_fb[ c ][ r + pos ] = *( image + row );
 815              		.loc 1 182 50 discriminator 3
 816 0034 8B45F8   		movl	-8(%rbp), %eax
 817 0037 4898     		cltq
 818 0039 488D1400 		leaq	(%rax,%rax), %rdx
 819 003d 488B45D0 		movq	-48(%rbp), %rax
 820 0041 4801D0   		addq	%rdx, %rax
 821              		.loc 1 182 14 discriminator 3
 822 0044 488B0D00 		movq	m(%rip), %rcx
 822      000000
 823              		.loc 1 182 31 discriminator 3
 824 004b 8B75EC   		movl	-20(%rbp), %esi
 825 004e 8B55FC   		movl	-4(%rbp), %edx
 826 0051 01F2     		addl	%esi, %edx
 827              		.loc 1 182 41 discriminator 3
 828 0053 0FB730   		movzwl	(%rax), %esi
 829              		.loc 1 182 39 discriminator 3
 830 0056 4863FA   		movslq	%edx, %rdi
 831 0059 8B45E8   		movl	-24(%rbp), %eax
 832 005c 4863D0   		movslq	%eax, %rdx
 833 005f 4889D0   		movq	%rdx, %rax
 834 0062 48C1E004 		salq	$4, %rax
 835 0066 4829D0   		subq	%rdx, %rax
 836 0069 48C1E004 		salq	$4, %rax
 837 006d 4801F8   		addq	%rdi, %rax
 838 0070 4883C008 		addq	$8, %rax
 839 0074 66897441 		movw	%si, 8(%rcx,%rax,2)
 839      08
 180:host/frame_buffer.c ****         {
 840              		.loc 1 180 57 discriminator 3
 841 0079 8345F801 		addl	$1, -8(%rbp)
 180:host/frame_buffer.c ****         {
 842              		.loc 1 180 64 discriminator 3
 843 007d 8345FC01 		addl	$1, -4(%rbp)
 844              	.L43:
 180:host/frame_buffer.c ****         {
 845              		.loc 1 180 9 discriminator 1
 846 0081 8B45F8   		movl	-8(%rbp), %eax
 847 0084 3B45E0   		cmpl	-32(%rbp), %eax
 848 0087 7CAB     		jl	.L44
 849              	.LBE12:
 183:host/frame_buffer.c ****         }
 184:host/frame_buffer.c ****         image += width;
 850              		.loc 1 184 15 discriminator 2
 851 0089 8B45E0   		movl	-32(%rbp), %eax
 852 008c 4898     		cltq
 853 008e 4801C0   		addq	%rax, %rax
 854 0091 480145D0 		addq	%rax, -48(%rbp)
 178:host/frame_buffer.c ****     {
 855              		.loc 1 178 40 discriminator 2
 856 0095 8345F401 		addl	$1, -12(%rbp)
 857              	.L42:
 178:host/frame_buffer.c ****     {
 858              		.loc 1 178 5 discriminator 1
 859 0099 8B45F4   		movl	-12(%rbp), %eax
 860 009c 3B45DC   		cmpl	-36(%rbp), %eax
 861 009f 7C84     		jl	.L45
 862              	.LBE11:
 185:host/frame_buffer.c ****     }
 186:host/frame_buffer.c **** }
 863              		.loc 1 186 1
 864 00a1 90       		nop
 865 00a2 90       		nop
 866 00a3 5D       		popq	%rbp
 867              		.cfi_def_cfa 7, 8
 868 00a4 C3       		ret
 869              		.cfi_endproc
 870              	.LFE4025:
 872              		.section	.text.drawBackground,"ax",@progbits
 873              		.globl	drawBackground
 875              	drawBackground:
 876              	.LFB4026:
 187:host/frame_buffer.c **** 
 188:host/frame_buffer.c **** void drawBackground(const uint16_t *image)
 189:host/frame_buffer.c **** {
 877              		.loc 1 189 1
 878              		.cfi_startproc
 879 0000 F30F1EFA 		endbr64
 880 0004 55       		pushq	%rbp
 881              		.cfi_def_cfa_offset 16
 882              		.cfi_offset 6, -16
 883 0005 4889E5   		movq	%rsp, %rbp
 884              		.cfi_def_cfa_register 6
 885 0008 4883EC08 		subq	$8, %rsp
 886 000c 48897DF8 		movq	%rdi, -8(%rbp)
 190:host/frame_buffer.c ****     drawImage3( 0,0, WIDTH, HEIGHT, image );
 887              		.loc 1 190 5
 888 0010 488B45F8 		movq	-8(%rbp), %rax
 889 0014 4989C0   		movq	%rax, %r8
 890 0017 B9A00000 		movl	$160, %ecx
 890      00
 891 001c BAF00000 		movl	$240, %edx
 891      00
 892 0021 BE000000 		movl	$0, %esi
 892      00
 893 0026 BF000000 		movl	$0, %edi
 893      00
 894 002b E8000000 		call	drawImage3
 894      00
 191:host/frame_buffer.c **** }
 895              		.loc 1 191 1
 896 0030 90       		nop
 897 0031 C9       		leave
 898              		.cfi_def_cfa 7, 8
 899 0032 C3       		ret
 900              		.cfi_endproc
 901              	.LFE4026:
 903              		.section	.text.drawHorizontal,"ax",@progbits
 904              		.globl	drawHorizontal
 906              	drawHorizontal:
 907              	.LFB4027:
 192:host/frame_buffer.c **** 
 193:host/frame_buffer.c **** void drawHorizontal(int row, int col, int width, unsigned int color)
 194:host/frame_buffer.c **** {
 908              		.loc 1 194 1
 909              		.cfi_startproc
 910 0000 F30F1EFA 		endbr64
 911 0004 55       		pushq	%rbp
 912              		.cfi_def_cfa_offset 16
 913              		.cfi_offset 6, -16
 914 0005 4889E5   		movq	%rsp, %rbp
 915              		.cfi_def_cfa_register 6
 916 0008 897DEC   		movl	%edi, -20(%rbp)
 917 000b 8975E8   		movl	%esi, -24(%rbp)
 918 000e 8955E4   		movl	%edx, -28(%rbp)
 919 0011 894DE0   		movl	%ecx, -32(%rbp)
 195:host/frame_buffer.c ****     int endw = row + width;
 920              		.loc 1 195 9
 921 0014 8B55EC   		movl	-20(%rbp), %edx
 922 0017 8B45E4   		movl	-28(%rbp), %eax
 923 001a 01D0     		addl	%edx, %eax
 924 001c 8945F8   		movl	%eax, -8(%rbp)
 196:host/frame_buffer.c ****     if( endw > WIDTH )
 925              		.loc 1 196 7
 926 001f 817DF8F0 		cmpl	$240, -8(%rbp)
 926      000000
 927 0026 7E07     		jle	.L48
 197:host/frame_buffer.c ****     {
 198:host/frame_buffer.c ****         endw = WIDTH;
 928              		.loc 1 198 14
 929 0028 C745F8F0 		movl	$240, -8(%rbp)
 929      000000
 930              	.L48:
 931              	.LBB13:
 199:host/frame_buffer.c ****     }
 200:host/frame_buffer.c ****     for( int r = row; r < endw; r++ )
 932              		.loc 1 200 14
 933 002f 8B45EC   		movl	-20(%rbp), %eax
 934 0032 8945FC   		movl	%eax, -4(%rbp)
 935              		.loc 1 200 5
 936 0035 EB36     		jmp	.L49
 937              	.L50:
 201:host/frame_buffer.c ****     {
 202:host/frame_buffer.c ****         m->tft_fb[ col ][ r ] = color;
 938              		.loc 1 202 10 discriminator 3
 939 0037 488B0D00 		movq	m(%rip), %rcx
 939      000000
 940              		.loc 1 202 31 discriminator 3
 941 003e 8B45E0   		movl	-32(%rbp), %eax
 942 0041 89C7     		movl	%eax, %edi
 943 0043 8B45FC   		movl	-4(%rbp), %eax
 944 0046 4863F0   		movslq	%eax, %rsi
 945 0049 8B45E8   		movl	-24(%rbp), %eax
 946 004c 4863D0   		movslq	%eax, %rdx
 947 004f 4889D0   		movq	%rdx, %rax
 948 0052 48C1E004 		salq	$4, %rax
 949 0056 4829D0   		subq	%rdx, %rax
 950 0059 48C1E004 		salq	$4, %rax
 951 005d 4801F0   		addq	%rsi, %rax
 952 0060 4883C008 		addq	$8, %rax
 953 0064 66897C41 		movw	%di, 8(%rcx,%rax,2)
 953      08
 200:host/frame_buffer.c ****     {
 954              		.loc 1 200 34 discriminator 3
 955 0069 8345FC01 		addl	$1, -4(%rbp)
 956              	.L49:
 200:host/frame_buffer.c ****     {
 957              		.loc 1 200 5 discriminator 1
 958 006d 8B45FC   		movl	-4(%rbp), %eax
 959 0070 3B45F8   		cmpl	-8(%rbp), %eax
 960 0073 7CC2     		jl	.L50
 961              	.LBE13:
 203:host/frame_buffer.c ****     }
 204:host/frame_buffer.c **** }
 962              		.loc 1 204 1
 963 0075 90       		nop
 964 0076 90       		nop
 965 0077 5D       		popq	%rbp
 966              		.cfi_def_cfa 7, 8
 967 0078 C3       		ret
 968              		.cfi_endproc
 969              	.LFE4027:
 971              		.section	.text.drawVertical,"ax",@progbits
 972              		.globl	drawVertical
 974              	drawVertical:
 975              	.LFB4028:
 205:host/frame_buffer.c **** 
 206:host/frame_buffer.c **** void drawVertical(int row, int col, int height, int width, unsigned int color)
 207:host/frame_buffer.c **** {
 976              		.loc 1 207 1
 977              		.cfi_startproc
 978 0000 F30F1EFA 		endbr64
 979 0004 55       		pushq	%rbp
 980              		.cfi_def_cfa_offset 16
 981              		.cfi_offset 6, -16
 982 0005 4889E5   		movq	%rsp, %rbp
 983              		.cfi_def_cfa_register 6
 984 0008 897DEC   		movl	%edi, -20(%rbp)
 985 000b 8975E8   		movl	%esi, -24(%rbp)
 986 000e 8955E4   		movl	%edx, -28(%rbp)
 987 0011 894DE0   		movl	%ecx, -32(%rbp)
 988 0014 448945DC 		movl	%r8d, -36(%rbp)
 208:host/frame_buffer.c ****     int endw = row + width;
 989              		.loc 1 208 9
 990 0018 8B55EC   		movl	-20(%rbp), %edx
 991 001b 8B45E0   		movl	-32(%rbp), %eax
 992 001e 01D0     		addl	%edx, %eax
 993 0020 8945F0   		movl	%eax, -16(%rbp)
 209:host/frame_buffer.c ****     int endh = col + height;
 994              		.loc 1 209 9
 995 0023 8B55E8   		movl	-24(%rbp), %edx
 996 0026 8B45E4   		movl	-28(%rbp), %eax
 997 0029 01D0     		addl	%edx, %eax
 998 002b 8945F4   		movl	%eax, -12(%rbp)
 210:host/frame_buffer.c ****     if( endw > WIDTH )
 999              		.loc 1 210 7
 1000 002e 817DF0F0 		cmpl	$240, -16(%rbp)
 1000      000000
 1001 0035 7E07     		jle	.L52
 211:host/frame_buffer.c ****     {
 212:host/frame_buffer.c ****         endw = WIDTH;
 1002              		.loc 1 212 14
 1003 0037 C745F0F0 		movl	$240, -16(%rbp)
 1003      000000
 1004              	.L52:
 213:host/frame_buffer.c ****     }
 214:host/frame_buffer.c ****     if( endh > HEIGHT )
 1005              		.loc 1 214 7
 1006 003e 817DF4A0 		cmpl	$160, -12(%rbp)
 1006      000000
 1007 0045 7E07     		jle	.L53
 215:host/frame_buffer.c ****     {
 216:host/frame_buffer.c ****         endh = HEIGHT;
 1008              		.loc 1 216 14
 1009 0047 C745F4A0 		movl	$160, -12(%rbp)
 1009      000000
 1010              	.L53:
 1011              	.LBB14:
 217:host/frame_buffer.c ****     }
 218:host/frame_buffer.c **** 
 219:host/frame_buffer.c ****     for( int c = col; c < endh; c++ )
 1012              		.loc 1 219 14
 1013 004e 8B45E8   		movl	-24(%rbp), %eax
 1014 0051 8945F8   		movl	%eax, -8(%rbp)
 1015              		.loc 1 219 5
 1016 0054 EB4A     		jmp	.L54
 1017              	.L57:
 1018              	.LBB15:
 220:host/frame_buffer.c ****     {
 221:host/frame_buffer.c ****         for( int r = row; r < endw; r++ )
 1019              		.loc 1 221 18
 1020 0056 8B45EC   		movl	-20(%rbp), %eax
 1021 0059 8945FC   		movl	%eax, -4(%rbp)
 1022              		.loc 1 221 9
 1023 005c EB36     		jmp	.L55
 1024              	.L56:
 222:host/frame_buffer.c ****         {
 223:host/frame_buffer.c ****             m->tft_fb[ c ][ r ] = color;
 1025              		.loc 1 223 14 discriminator 3
 1026 005e 488B0D00 		movq	m(%rip), %rcx
 1026      000000
 1027              		.loc 1 223 33 discriminator 3
 1028 0065 8B45DC   		movl	-36(%rbp), %eax
 1029 0068 89C7     		movl	%eax, %edi
 1030 006a 8B45FC   		movl	-4(%rbp), %eax
 1031 006d 4863F0   		movslq	%eax, %rsi
 1032 0070 8B45F8   		movl	-8(%rbp), %eax
 1033 0073 4863D0   		movslq	%eax, %rdx
 1034 0076 4889D0   		movq	%rdx, %rax
 1035 0079 48C1E004 		salq	$4, %rax
 1036 007d 4829D0   		subq	%rdx, %rax
 1037 0080 48C1E004 		salq	$4, %rax
 1038 0084 4801F0   		addq	%rsi, %rax
 1039 0087 4883C008 		addq	$8, %rax
 1040 008b 66897C41 		movw	%di, 8(%rcx,%rax,2)
 1040      08
 221:host/frame_buffer.c ****         {
 1041              		.loc 1 221 38 discriminator 3
 1042 0090 8345FC01 		addl	$1, -4(%rbp)
 1043              	.L55:
 221:host/frame_buffer.c ****         {
 1044              		.loc 1 221 9 discriminator 1
 1045 0094 8B45FC   		movl	-4(%rbp), %eax
 1046 0097 3B45F0   		cmpl	-16(%rbp), %eax
 1047 009a 7CC2     		jl	.L56
 1048              	.LBE15:
 219:host/frame_buffer.c ****     {
 1049              		.loc 1 219 34 discriminator 2
 1050 009c 8345F801 		addl	$1, -8(%rbp)
 1051              	.L54:
 219:host/frame_buffer.c ****     {
 1052              		.loc 1 219 5 discriminator 1
 1053 00a0 8B45F8   		movl	-8(%rbp), %eax
 1054 00a3 3B45F4   		cmpl	-12(%rbp), %eax
 1055 00a6 7CAE     		jl	.L57
 1056              	.LBE14:
 224:host/frame_buffer.c ****         }
 225:host/frame_buffer.c ****     }
 226:host/frame_buffer.c **** }
 1057              		.loc 1 226 1
 1058 00a8 90       		nop
 1059 00a9 90       		nop
 1060 00aa 5D       		popq	%rbp
 1061              		.cfi_def_cfa 7, 8
 1062 00ab C3       		ret
 1063              		.cfi_endproc
 1064              	.LFE4028:
 1066              		.section	.text.poll_controller,"ax",@progbits
 1067              		.globl	poll_controller
 1069              	poll_controller:
 1070              	.LFB4029:
 227:host/frame_buffer.c **** 
 228:host/frame_buffer.c **** uint32_t poll_controller(uint32_t delay)
 229:host/frame_buffer.c **** {
 1071              		.loc 1 229 1
 1072              		.cfi_startproc
 1073 0000 F30F1EFA 		endbr64
 1074 0004 55       		pushq	%rbp
 1075              		.cfi_def_cfa_offset 16
 1076              		.cfi_offset 6, -16
 1077 0005 4889E5   		movq	%rsp, %rbp
 1078              		.cfi_def_cfa_register 6
 1079 0008 4883EC60 		subq	$96, %rsp
 1080 000c 897DAC   		movl	%edi, -84(%rbp)
 1081              		.loc 1 229 1
 1082 000f 64488B04 		movq	%fs:40, %rax
 1082      25280000 
 1082      00
 1083 0018 488945F8 		movq	%rax, -8(%rbp)
 1084 001c 31C0     		xorl	%eax, %eax
 230:host/frame_buffer.c ****     SDL_Event event;
 231:host/frame_buffer.c ****     uint32_t mask = 0;
 1085              		.loc 1 231 14
 1086 001e C745B800 		movl	$0, -72(%rbp)
 1086      000000
 232:host/frame_buffer.c ****     int keyPressed = 0;
 1087              		.loc 1 232 9
 1088 0025 C745BC00 		movl	$0, -68(%rbp)
 1088      000000
 233:host/frame_buffer.c **** 
 234:host/frame_buffer.c ****     while( SDL_PollEvent( &event ) )
 1089              		.loc 1 234 10
 1090 002c E93A0100 		jmp	.L59
 1090      00
 1091              	.L78:
 235:host/frame_buffer.c ****     {
 236:host/frame_buffer.c ****         switch( event.key.keysym.sym )
 1092              		.loc 1 236 33
 1093 0031 8B45D4   		movl	-44(%rbp), %eax
 1094              		.loc 1 236 9
 1095 0034 3D9E0000 		cmpl	$1073741982, %eax
 1095      40
 1096 0039 0F84DA00 		je	.L60
 1096      0000
 1097 003f 3D9E0000 		cmpl	$1073741982, %eax
 1097      40
 1098 0044 0F8FFB00 		jg	.L61
 1098      0000
 1099 004a 3D620000 		cmpl	$1073741922, %eax
 1099      40
 1100 004f 0F8FF000 		jg	.L61
 1100      0000
 1101 0055 3D4F0000 		cmpl	$1073741903, %eax
 1101      40
 1102 005a 7D6C     		jge	.L62
 1103 005c 83F877   		cmpl	$119, %eax
 1104 005f 0F84A500 		je	.L63
 1104      0000
 1105 0065 83F877   		cmpl	$119, %eax
 1106 0068 0F8FD700 		jg	.L61
 1106      0000
 1107 006e 83F871   		cmpl	$113, %eax
 1108 0071 0F848A00 		je	.L64
 1108      0000
 1109 0077 83F871   		cmpl	$113, %eax
 1110 007a 0F8FC500 		jg	.L61
 1110      0000
 1111 0080 83F862   		cmpl	$98, %eax
 1112 0083 7476     		je	.L65
 1113 0085 83F862   		cmpl	$98, %eax
 1114 0088 0F8FB700 		jg	.L61
 1114      0000
 1115 008e 83F861   		cmpl	$97, %eax
 1116 0091 7462     		je	.L66
 1117 0093 83F861   		cmpl	$97, %eax
 1118 0096 0F8FA900 		jg	.L61
 1118      0000
 1119 009c 83F830   		cmpl	$48, %eax
 1120 009f 0F849F00 		je	.L84
 1120      0000
 1121 00a5 83F830   		cmpl	$48, %eax
 1122 00a8 0F8F9700 		jg	.L61
 1122      0000
 1123 00ae 83F820   		cmpl	$32, %eax
 1124 00b1 7460     		je	.L68
 1125 00b3 83F820   		cmpl	$32, %eax
 1126 00b6 0F8F8900 		jg	.L61
 1126      0000
 1127 00bc 83F80D   		cmpl	$13, %eax
 1128 00bf 7458     		je	.L60
 1129 00c1 83F81B   		cmpl	$27, %eax
 1130 00c4 7474     		je	.L69
 1131 00c6 EB7D     		jmp	.L61
 1132              	.L62:
 1133 00c8 2D4F0000 		subl	$1073741903, %eax
 1133      40
 1134 00cd 83F813   		cmpl	$19, %eax
 1135 00d0 7773     		ja	.L61
 1136 00d2 89C0     		movl	%eax, %eax
 1137 00d4 488D1485 		leaq	0(,%rax,4), %rdx
 1137      00000000 
 1138 00dc 488D0500 		leaq	.L70(%rip), %rax
 1138      000000
 1139 00e3 8B0402   		movl	(%rdx,%rax), %eax
 1140 00e6 4898     		cltq
 1141 00e8 488D1500 		leaq	.L70(%rip), %rdx
 1141      000000
 1142 00ef 4801D0   		addq	%rdx, %rax
 1143 00f2 3EFFE0   		notrack jmp	*%rax
 1144              		.section	.rodata.poll_controller,"a",@progbits
 1145              		.align 4
 1146              		.align 4
 1147              	.L70:
 1148 0000 00000000 		.long	.L71-.L70
 1149 0004 00000000 		.long	.L72-.L70
 1150 0008 00000000 		.long	.L74-.L70
 1151 000c 00000000 		.long	.L73-.L70
 1152 0010 00000000 		.long	.L61-.L70
 1153 0014 00000000 		.long	.L61-.L70
 1154 0018 00000000 		.long	.L61-.L70
 1155 001c 00000000 		.long	.L72-.L70
 1156 0020 00000000 		.long	.L71-.L70
 1157 0024 00000000 		.long	.L61-.L70
 1158 0028 00000000 		.long	.L61-.L70
 1159 002c 00000000 		.long	.L61-.L70
 1160 0030 00000000 		.long	.L61-.L70
 1161 0034 00000000 		.long	.L61-.L70
 1162 0038 00000000 		.long	.L61-.L70
 1163 003c 00000000 		.long	.L61-.L70
 1164 0040 00000000 		.long	.L61-.L70
 1165 0044 00000000 		.long	.L61-.L70
 1166 0048 00000000 		.long	.L61-.L70
 1167 004c 00000000 		.long	.L61-.L70
 1168              		.section	.text.poll_controller
 1169              	.L66:
 237:host/frame_buffer.c ****         {
 238:host/frame_buffer.c ****         case SDLK_a :
 239:host/frame_buffer.c ****             mask |= BUTTON_A;
 1170              		.loc 1 239 18
 1171 00f5 834DB801 		orl	$1, -72(%rbp)
 240:host/frame_buffer.c ****             break;
 1172              		.loc 1 240 13
 1173 00f9 EB4A     		jmp	.L61
 1174              	.L65:
 241:host/frame_buffer.c **** 
 242:host/frame_buffer.c ****         case SDLK_b :
 243:host/frame_buffer.c ****             mask |= BUTTON_B;
 1175              		.loc 1 243 18
 1176 00fb 834DB802 		orl	$2, -72(%rbp)
 244:host/frame_buffer.c ****             break;
 1177              		.loc 1 244 13
 1178 00ff EB44     		jmp	.L61
 1179              	.L64:
 245:host/frame_buffer.c **** 
 246:host/frame_buffer.c ****         case SDLK_q :
 247:host/frame_buffer.c ****             mask |= BUTTON_L;
 1180              		.loc 1 247 18
 1181 0101 814DB800 		orl	$512, -72(%rbp)
 1181      020000
 248:host/frame_buffer.c ****             break;
 1182              		.loc 1 248 13
 1183 0108 EB3B     		jmp	.L61
 1184              	.L63:
 249:host/frame_buffer.c **** 
 250:host/frame_buffer.c ****         case SDLK_w :
 251:host/frame_buffer.c ****             mask |= BUTTON_R;
 1185              		.loc 1 251 18
 1186 010a 814DB800 		orl	$256, -72(%rbp)
 1186      010000
 252:host/frame_buffer.c ****             break;
 1187              		.loc 1 252 13
 1188 0111 EB32     		jmp	.L61
 1189              	.L68:
 253:host/frame_buffer.c **** 
 254:host/frame_buffer.c ****         case SDLK_SPACE :
 255:host/frame_buffer.c ****             mask |= BUTTON_SELECT;
 1190              		.loc 1 255 18
 1191 0113 834DB804 		orl	$4, -72(%rbp)
 256:host/frame_buffer.c ****             break;
 1192              		.loc 1 256 13
 1193 0117 EB2C     		jmp	.L61
 1194              	.L60:
 257:host/frame_buffer.c **** 
 258:host/frame_buffer.c ****         case SDLK_RETURN2 :
 259:host/frame_buffer.c ****         case SDLK_RETURN :
 260:host/frame_buffer.c ****             mask |= BUTTON_START;
 1195              		.loc 1 260 18
 1196 0119 834DB808 		orl	$8, -72(%rbp)
 261:host/frame_buffer.c ****             break;
 1197              		.loc 1 261 13
 1198 011d EB26     		jmp	.L61
 1199              	.L71:
 262:host/frame_buffer.c **** 
 263:host/frame_buffer.c ****         case SDLK_KP_0 :
 264:host/frame_buffer.c ****         case SDLK_0 :
 265:host/frame_buffer.c ****             break;
 266:host/frame_buffer.c **** 
 267:host/frame_buffer.c ****         case SDLK_RIGHT:
 268:host/frame_buffer.c ****         case SDLK_KP_PLUS:
 269:host/frame_buffer.c ****             mask |= BUTTON_RIGHT;
 1200              		.loc 1 269 18
 1201 011f 834DB810 		orl	$16, -72(%rbp)
 270:host/frame_buffer.c ****             break;
 1202              		.loc 1 270 13
 1203 0123 EB20     		jmp	.L61
 1204              	.L72:
 271:host/frame_buffer.c **** 
 272:host/frame_buffer.c ****         case SDLK_LEFT:
 273:host/frame_buffer.c ****         case SDLK_KP_MINUS:
 274:host/frame_buffer.c ****             mask |= BUTTON_LEFT;
 1205              		.loc 1 274 18
 1206 0125 834DB820 		orl	$32, -72(%rbp)
 275:host/frame_buffer.c ****             break;
 1207              		.loc 1 275 13
 1208 0129 EB1A     		jmp	.L61
 1209              	.L73:
 276:host/frame_buffer.c **** 
 277:host/frame_buffer.c ****         case SDLK_UP:
 278:host/frame_buffer.c ****             mask |= BUTTON_UP;
 1210              		.loc 1 278 18
 1211 012b 834DB840 		orl	$64, -72(%rbp)
 279:host/frame_buffer.c ****             break;
 1212              		.loc 1 279 13
 1213 012f EB14     		jmp	.L61
 1214              	.L74:
 280:host/frame_buffer.c **** 
 281:host/frame_buffer.c ****         case SDLK_DOWN:
 282:host/frame_buffer.c ****             mask |= BUTTON_DOWN;
 1215              		.loc 1 282 18
 1216 0131 814DB880 		orl	$128, -72(%rbp)
 1216      000000
 283:host/frame_buffer.c ****             break;
 1217              		.loc 1 283 13
 1218 0138 EB0B     		jmp	.L61
 1219              	.L69:
 284:host/frame_buffer.c **** 
 285:host/frame_buffer.c ****         case SDLK_ESCAPE:
 286:host/frame_buffer.c ****             exit( 1 );
 1220              		.loc 1 286 13
 1221 013a BF010000 		movl	$1, %edi
 1221      00
 1222 013f E8000000 		call	exit@PLT
 1222      00
 1223              	.L84:
 265:host/frame_buffer.c **** 
 1224              		.loc 1 265 13
 1225 0144 90       		nop
 1226              	.L61:
 287:host/frame_buffer.c ****             break;
 288:host/frame_buffer.c ****         }
 289:host/frame_buffer.c **** 
 290:host/frame_buffer.c ****         switch( event.type )
 1227              		.loc 1 290 22
 1228 0145 8B45C0   		movl	-64(%rbp), %eax
 1229              		.loc 1 290 9
 1230 0148 3D000300 		cmpl	$768, %eax
 1230      00
 1231 014d 7409     		je	.L75
 1232 014f 3D010300 		cmpl	$769, %eax
 1232      00
 1233 0154 740B     		je	.L76
 1234 0156 EB12     		jmp	.L83
 1235              	.L75:
 291:host/frame_buffer.c ****         {
 292:host/frame_buffer.c ****         case SDL_KEYDOWN:
 293:host/frame_buffer.c ****             keyPressed = 1;
 1236              		.loc 1 293 24
 1237 0158 C745BC01 		movl	$1, -68(%rbp)
 1237      000000
 294:host/frame_buffer.c ****             break;
 1238              		.loc 1 294 13
 1239 015f EB0A     		jmp	.L59
 1240              	.L76:
 295:host/frame_buffer.c **** 
 296:host/frame_buffer.c ****         case SDL_KEYUP:
 297:host/frame_buffer.c ****             keyPressed = 0;
 1241              		.loc 1 297 24
 1242 0161 C745BC00 		movl	$0, -68(%rbp)
 1242      000000
 298:host/frame_buffer.c ****             break;
 1243              		.loc 1 298 13
 1244 0168 EB01     		jmp	.L59
 1245              	.L83:
 299:host/frame_buffer.c **** 
 300:host/frame_buffer.c ****         default:
 301:host/frame_buffer.c ****             break;
 1246              		.loc 1 301 13
 1247 016a 90       		nop
 1248              	.L59:
 234:host/frame_buffer.c ****     {
 1249              		.loc 1 234 12
 1250 016b 488D45C0 		leaq	-64(%rbp), %rax
 1251 016f 4889C7   		movq	%rax, %rdi
 1252 0172 E8000000 		call	SDL_PollEvent@PLT
 1252      00
 234:host/frame_buffer.c ****     {
 1253              		.loc 1 234 10
 1254 0177 85C0     		testl	%eax, %eax
 1255 0179 0F85B2FE 		jne	.L78
 1255      FFFF
 302:host/frame_buffer.c **** 
 303:host/frame_buffer.c ****         }
 304:host/frame_buffer.c ****     }
 305:host/frame_buffer.c **** 
 306:host/frame_buffer.c ****     if( keyPressed )
 1256              		.loc 1 306 7
 1257 017f 837DBC00 		cmpl	$0, -68(%rbp)
 1258 0183 7417     		je	.L79
 307:host/frame_buffer.c ****     {
 308:host/frame_buffer.c ****         buttons &= ~( mask );
 1259              		.loc 1 308 20
 1260 0185 8B45B8   		movl	-72(%rbp), %eax
 1261 0188 F7D0     		notl	%eax
 1262 018a 89C2     		movl	%eax, %edx
 1263              		.loc 1 308 17
 1264 018c 8B050000 		movl	buttons(%rip), %eax
 1264      0000
 1265 0192 21D0     		andl	%edx, %eax
 1266 0194 89050000 		movl	%eax, buttons(%rip)
 1266      0000
 1267 019a EB0F     		jmp	.L80
 1268              	.L79:
 309:host/frame_buffer.c ****     }
 310:host/frame_buffer.c ****     else
 311:host/frame_buffer.c ****     {
 312:host/frame_buffer.c ****         buttons |= mask;
 1269              		.loc 1 312 17
 1270 019c 8B050000 		movl	buttons(%rip), %eax
 1270      0000
 1271 01a2 0B45B8   		orl	-72(%rbp), %eax
 1272 01a5 89050000 		movl	%eax, buttons(%rip)
 1272      0000
 1273              	.L80:
 313:host/frame_buffer.c ****     }
 314:host/frame_buffer.c **** 
 315:host/frame_buffer.c ****     SDL_Delay( delay ); /* Sleep for 5 millisecond */
 1274              		.loc 1 315 5
 1275 01ab 8B45AC   		movl	-84(%rbp), %eax
 1276 01ae 89C7     		movl	%eax, %edi
 1277 01b0 E8000000 		call	SDL_Delay@PLT
 1277      00
 316:host/frame_buffer.c **** 
 317:host/frame_buffer.c ****     return buttons;
 1278              		.loc 1 317 12
 1279 01b5 8B050000 		movl	buttons(%rip), %eax
 1279      0000
 318:host/frame_buffer.c **** }
 1280              		.loc 1 318 1
 1281 01bb 488B4DF8 		movq	-8(%rbp), %rcx
 1282 01bf 6448330C 		xorq	%fs:40, %rcx
 1282      25280000 
 1282      00
 1283 01c8 7405     		je	.L82
 1284 01ca E8000000 		call	__stack_chk_fail@PLT
 1284      00
 1285              	.L82:
 1286 01cf C9       		leave
 1287              		.cfi_def_cfa 7, 8
 1288 01d0 C3       		ret
 1289              		.cfi_endproc
 1290              	.LFE4029:
 1292              		.section	.text.button_get,"ax",@progbits
 1293              		.globl	button_get
 1295              	button_get:
 1296              	.LFB4030:
 319:host/frame_buffer.c **** 
 320:host/frame_buffer.c **** uint32_t button_get( void )
 321:host/frame_buffer.c **** {
 1297              		.loc 1 321 1
 1298              		.cfi_startproc
 1299 0000 F30F1EFA 		endbr64
 1300 0004 55       		pushq	%rbp
 1301              		.cfi_def_cfa_offset 16
 1302              		.cfi_offset 6, -16
 1303 0005 4889E5   		movq	%rsp, %rbp
 1304              		.cfi_def_cfa_register 6
 322:host/frame_buffer.c ****     return buttons;
 1305              		.loc 1 322 12
 1306 0008 8B050000 		movl	buttons(%rip), %eax
 1306      0000
 323:host/frame_buffer.c **** }
 1307              		.loc 1 323 1
 1308 000e 5D       		popq	%rbp
 1309              		.cfi_def_cfa 7, 8
 1310 000f C3       		ret
 1311              		.cfi_endproc
 1312              	.LFE4030:
 1314              		.section	.text.waitForVblank,"ax",@progbits
 1315              		.globl	waitForVblank
 1317              	waitForVblank:
 1318              	.LFB4031:
 324:host/frame_buffer.c **** 
 325:host/frame_buffer.c **** void waitForVblank(void)
 326:host/frame_buffer.c **** {
 1319              		.loc 1 326 1
 1320              		.cfi_startproc
 1321 0000 F30F1EFA 		endbr64
 1322 0004 55       		pushq	%rbp
 1323              		.cfi_def_cfa_offset 16
 1324              		.cfi_offset 6, -16
 1325 0005 4889E5   		movq	%rsp, %rbp
 1326              		.cfi_def_cfa_register 6
 327:host/frame_buffer.c ****     poll_controller(16);
 1327              		.loc 1 327 5
 1328 0008 BF100000 		movl	$16, %edi
 1328      00
 1329 000d E8000000 		call	poll_controller
 1329      00
 328:host/frame_buffer.c ****     frame_buffer_switch(0);
 1330              		.loc 1 328 5
 1331 0012 BF000000 		movl	$0, %edi
 1331      00
 1332 0017 E8000000 		call	frame_buffer_switch
 1332      00
 329:host/frame_buffer.c **** }
 1333              		.loc 1 329 1
 1334 001c 90       		nop
 1335 001d 5D       		popq	%rbp
 1336              		.cfi_def_cfa 7, 8
 1337 001e C3       		ret
 1338              		.cfi_endproc
 1339              	.LFE4031:
 1341              		.section	.text.delay,"ax",@progbits
 1342              		.globl	delay
 1344              	delay:
 1345              	.LFB4032:
 330:host/frame_buffer.c **** 
 331:host/frame_buffer.c **** void delay(int n)
 332:host/frame_buffer.c **** {
 1346              		.loc 1 332 1
 1347              		.cfi_startproc
 1348 0000 F30F1EFA 		endbr64
 1349 0004 55       		pushq	%rbp
 1350              		.cfi_def_cfa_offset 16
 1351              		.cfi_offset 6, -16
 1352 0005 4889E5   		movq	%rsp, %rbp
 1353              		.cfi_def_cfa_register 6
 1354 0008 4883EC10 		subq	$16, %rsp
 1355 000c 897DFC   		movl	%edi, -4(%rbp)
 333:host/frame_buffer.c ****     SDL_Delay( n );
 1356              		.loc 1 333 5
 1357 000f 8B45FC   		movl	-4(%rbp), %eax
 1358 0012 89C7     		movl	%eax, %edi
 1359 0014 E8000000 		call	SDL_Delay@PLT
 1359      00
 334:host/frame_buffer.c **** }
 1360              		.loc 1 334 1
 1361 0019 90       		nop
 1362 001a C9       		leave
 1363              		.cfi_def_cfa 7, 8
 1364 001b C3       		ret
 1365              		.cfi_endproc
 1366              	.LFE4032:
 1368              		.section	.rodata.__PRETTY_FUNCTION__.29360,"a"
 1369              		.align 16
 1372              	__PRETTY_FUNCTION__.29360:
 1373 0000 6672616D 		.string	"frame_buffer_init"
 1373      655F6275 
 1373      66666572 
 1373      5F696E69 
 1373      7400
 1374              		.section	.rodata.__PRETTY_FUNCTION__.29365,"a"
 1375              		.align 16
 1378              	__PRETTY_FUNCTION__.29365:
 1379 0000 6672616D 		.string	"frame_buffer_switch"
 1379      655F6275 
 1379      66666572 
 1379      5F737769 
 1379      74636800 
 1380              		.text
 1381              	.Letext0:
 1382              		.file 2 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1383              		.file 3 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h"
 1384              		.file 4 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h"
 1385              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h"
 1386              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h"
 1387              		.file 7 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h"
 1388              		.file 8 "/usr/include/stdio.h"
 1389              		.file 9 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h"
 1390              		.file 10 "/usr/include/math.h"
 1391              		.file 11 "/usr/include/SDL2/SDL_stdinc.h"
 1392              		.file 12 "/usr/include/SDL2/SDL_pixels.h"
 1393              		.file 13 "/usr/include/SDL2/SDL_blendmode.h"
 1394              		.file 14 "/usr/include/SDL2/SDL_video.h"
 1395              		.file 15 "/usr/include/SDL2/SDL_scancode.h"
 1396              		.file 16 "/usr/include/SDL2/SDL_keycode.h"
 1397              		.file 17 "/usr/include/SDL2/SDL_keyboard.h"
 1398              		.file 18 "/usr/include/SDL2/SDL_joystick.h"
 1399              		.file 19 "/usr/include/SDL2/SDL_touch.h"
 1400              		.file 20 "/usr/include/SDL2/SDL_gesture.h"
 1401              		.file 21 "/usr/include/SDL2/SDL_events.h"
 1402              		.file 22 "/usr/include/SDL2/SDL_messagebox.h"
 1403              		.file 23 "/usr/include/SDL2/SDL_render.h"
 1404              		.file 24 "src/myLib.h"
 34336              		.section	.note.gnu.property,"a"
 34337              		.align 8
 34338 0000 04000000 		.long	 1f - 0f
 34339 0004 10000000 		.long	 4f - 1f
 34340 0008 05000000 		.long	 5
 34341              	0:
 34342 000c 474E5500 		.string	 "GNU"
 34343              	1:
 34344              		.align 8
 34345 0010 020000C0 		.long	 0xc0000002
 34346 0014 04000000 		.long	 3f - 2f
 34347              	2:
 34348 0018 03000000 		.long	 0x3
 34349              	3:
 34350 001c 00000000 		.align 8
 34351              	4:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 frame_buffer.c
     /tmp/ccTx6Flc.s:9      .bss.videoBuffer:0000000000000000 videoBuffer
     /tmp/ccTx6Flc.s:16     .data.buttons:0000000000000000 buttons
     /tmp/ccTx6Flc.s:22     .bss.monitor:0000000000000000 monitor
     /tmp/ccTx6Flc.s:29     .data.rel.local.m:0000000000000000 m
     /tmp/ccTx6Flc.s:34     .text.quit_filter:0000000000000000 quit_filter
     /tmp/ccTx6Flc.s:100    .text.frame_buffer_init:0000000000000000 frame_buffer_init
     /tmp/ccTx6Flc.s:1372   .rodata.__PRETTY_FUNCTION__.29360:0000000000000000 __PRETTY_FUNCTION__.29360
     /tmp/ccTx6Flc.s:243    .text.frame_buffer_switch:0000000000000000 frame_buffer_switch
     /tmp/ccTx6Flc.s:1378   .rodata.__PRETTY_FUNCTION__.29365:0000000000000000 __PRETTY_FUNCTION__.29365
     /tmp/ccTx6Flc.s:335    .text.setPixel:0000000000000000 setPixel
     /tmp/ccTx6Flc.s:375    .text.drawRectangle:0000000000000000 drawRectangle
     /tmp/ccTx6Flc.s:470    .text.background_color:0000000000000000 background_color
     /tmp/ccTx6Flc.s:539    .text.drawScreen:0000000000000000 drawScreen
     /tmp/ccTx6Flc.s:571    .text.fillinScreen:0000000000000000 fillinScreen
     /tmp/ccTx6Flc.s:602    .text.drawImage3:0000000000000000 drawImage3
     /tmp/ccTx6Flc.s:682    .text.undrawImage3:0000000000000000 undrawImage3
     /tmp/ccTx6Flc.s:779    .bss.print:0000000000000000 print
     /tmp/ccTx6Flc.s:784    .text.drawImage3FromRow:0000000000000000 drawImage3FromRow
     /tmp/ccTx6Flc.s:875    .text.drawBackground:0000000000000000 drawBackground
     /tmp/ccTx6Flc.s:906    .text.drawHorizontal:0000000000000000 drawHorizontal
     /tmp/ccTx6Flc.s:974    .text.drawVertical:0000000000000000 drawVertical
     /tmp/ccTx6Flc.s:1069   .text.poll_controller:0000000000000000 poll_controller
     /tmp/ccTx6Flc.s:1295   .text.button_get:0000000000000000 button_get
     /tmp/ccTx6Flc.s:1317   .text.waitForVblank:0000000000000000 waitForVblank
     /tmp/ccTx6Flc.s:1344   .text.delay:0000000000000000 delay
                           .group:0000000000000000 wm4.0.dfe1f935d32669a27ae367b33aa40043
                           .group:0000000000000000 wm4.stdcpredef.h.19.8dc41bed5d9037ff9622e015fb5f0ce3
                           .group:0000000000000000 wm4.stdint.h.23.022efde71688fcb285fe42cc87d41ee3
                           .group:0000000000000000 wm4.features.h.19.3042b63a76022a6d39c0cfc1936a7a01
                           .group:0000000000000000 wm4.cdefs.h.19.a8ffc9250e5bdadaabc998d2b2f3d734
                           .group:0000000000000000 wm4.wordsize.h.4.baf119258a1e53d8dba67ceac44ab6bc
                           .group:0000000000000000 wm4.cdefs.h.475.fb75d2e4416aa349344e6f45f683bf28
                           .group:0000000000000000 wm4.stubs64.h.10.6ce4c34010988db072c080326a6b6319
                           .group:0000000000000000 wm4.libcheaderstart.h.37.d9274df4cc0172452960ad9644fa5579
                           .group:0000000000000000 wm4.types.h.109.56eb9ae966b255288cc544f18746a7ff
                           .group:0000000000000000 wm4.typesizes.h.24.2c64f817c0dc4b6fb2a2c619d717be26
                           .group:0000000000000000 wm4.time64.h.24.a8166ae916ec910dab0d8987098d42ee
                           .group:0000000000000000 wm4.wchar.h.20.510818a05484290d697a517509bf4b2d
                           .group:0000000000000000 wm4.stdint.h.88.7e8071bbba3b822ff5b29420f80324ec
                           .group:0000000000000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:0000000000000000 wm4.SDL_platform.h.29.8d75e20214bb6544196ae121f130845d
                           .group:0000000000000000 wm4.begin_code.h.34.1993a63ff6a07ffe292769448130cbdb
                           .group:0000000000000000 wm4._real_SDL_config.h.47.bc16d697a55b617891fa576acfb50946
                           .group:0000000000000000 wm4.types.h.23.8c135527049415ffe7efcf8247fa202f
                           .group:0000000000000000 wm4.stddef.h.181.1fd55c98848ce779c40c2a88c0b689ea
                           .group:0000000000000000 wm4.endian.h.20.efabd1018df5d7b4052c27dc6bdd5ce5
                           .group:0000000000000000 wm4.endianness.h.2.2c6a211f7909f3af5e9e9cfa3b6b63c8
                           .group:0000000000000000 wm4.endian.h.40.9e5d395adda2f4eb53ae69b69b664084
                           .group:0000000000000000 wm4.endian.h.27.4c4f94262c4eaee2982fe00ed1b4f173
                           .group:0000000000000000 wm4.byteswap.h.24.5363c019348146aada5aeadf51456576
                           .group:0000000000000000 wm4.endian.h.39.30a606dbd99b6c3df61c1f06dbdabd4e
                           .group:0000000000000000 wm4.select.h.28.eb2f3debdbcffd1442ebddaebc4fb6ff
                           .group:0000000000000000 wm4.__sigset_t.h.2.6b1ab6ff3d7b8fd9c0c42b0d80afbd80
                           .group:0000000000000000 wm4.select.h.44.887a4ff60aa97fcd9c1be017735e1675
                           .group:0000000000000000 wm4.types.h.186.489a4ed8f2d29cd358843490f54ddea5
                           .group:0000000000000000 wm4.pthreadtypesarch.h.25.6063cba99664c916e22d3a912bcc348a
                           .group:0000000000000000 wm4.struct_mutex.h.20.ed51f515172b9be99e450ba83eb5dd99
                           .group:0000000000000000 wm4.struct_rwlock.h.21.0254880f2904e3833fb8ae683e0f0330
                           .group:0000000000000000 wm4.stdio.h.24.5c1b97eef3c86b7a2549420f69f4f128
                           .group:0000000000000000 wm4.libcheaderstart.h.31.87b3c285aeba93fe355ad19123070832
                           .group:0000000000000000 wm4.stdio.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.231.8136eebbab3406dbf57a7ec475dd5d83
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.struct_FILE.h.19.0888ac70396abe1031c03d393554032f
                           .group:0000000000000000 wm4.stdio.h.53.139e45cf040c0964b2932c0c1bdaf6b2
                           .group:0000000000000000 wm4.stdio_lim.h.19.e4b00b560d878dcfbc6635b3406640c5
                           .group:0000000000000000 wm4.stdio.h.141.d7a290e19ca077c9e4aa7c43ede17a73
                           .group:0000000000000000 wm4.stdlib.h.28.2cffa49d94c5d85f4538f55f7b59771d
                           .group:0000000000000000 wm4.stddef.h.231.ac1e89356001c54fbeb8aaa0d15e8b3c
                           .group:0000000000000000 wm4.waitflags.h.25.41934de4af99038521c2782f418699b1
                           .group:0000000000000000 wm4.waitstatus.h.28.93f167f49d64e2b9b99f98d1162a93bf
                           .group:0000000000000000 wm4.stdlib.h.43.9fa4f727a2f1cb8d2450a574c9195553
                           .group:0000000000000000 wm4.floatn.h.20.80c7cf8a8dfad237004b28d051d5afda
                           .group:0000000000000000 wm4.floatncommon.h.34.7e1840d7dfb19e9bdb51aeb077d76637
                           .group:0000000000000000 wm4.stdlib.h.71.2927e068ec678159b4f68ec2f089f7e6
                           .group:0000000000000000 wm4.alloca.h.19.edefa922a76c1cbaaf1e416903ba2d1c
                           .group:0000000000000000 wm4.stddef.h.231.0adce5c8c1fd8096aaff50981b3d1f0f
                           .group:0000000000000000 wm4.alloca.h.29.156e12058824cc23d961c4d3b13031f6
                           .group:0000000000000000 wm4.stddef.h.39.1bfffcccc3897d82880a055878218da6
                           .group:0000000000000000 wm4.stdarg.h.31.3fa7b8f6daaa31edd1696c08c77f2a73
                           .group:0000000000000000 wm4.string.h.23.93403f89af7dba8212345449bb14b09d
                           .group:0000000000000000 wm4.string.h.31.e39a94e203ad4e1d978c0fc68ce016ee
                           .group:0000000000000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:0000000000000000 wm4.strings.h.19.a259f126920b1bb5ef76bc62b3984a3c
                           .group:0000000000000000 wm4.wchar.h.24.10c1a3649a347ee5acc556316eedb15a
                           .group:0000000000000000 wm4.wchar.h.32.859ec9de6e76762773b13581955bbb2b
                           .group:0000000000000000 wm4.wint_t.h.2.b153cb48df5337e6e56fe1404a1b29c5
                           .group:0000000000000000 wm4.inttypes.h.23.2397f598c39b8a2316c758c5353fd94b
                           .group:0000000000000000 wm4.ctype.h.23.55e24ab5c73ba9c86bfbec8b0dba1e32
                           .group:0000000000000000 wm4.math.h.24.808d6e83a8b3b11b5fa9117392e0d6ca
                           .group:0000000000000000 wm4.libmsimddeclstubs.h.34.4541d7d9ef23fb8c722872ed06b4fd48
                           .group:0000000000000000 wm4.math.h.48.5dafc6157c80230c0414aa9de5e109ba
                           .group:0000000000000000 wm4.fplogb.h.23.f264b61801f4cf347bed2d0fad7232d9
                           .group:0000000000000000 wm4.math.h.193.2a53c39a04fb9ee53d2145d0dd51922b
                           .group:0000000000000000 wm4.math.h.262.a3ec711e4bc2a8e48d58e73f7b61f7e6
                           .group:0000000000000000 wm4.math.h.291.31c5ea429e9ba79c95bf28566b299669
                           .group:0000000000000000 wm4.math.h.308.057dcf159b5c763b6f753ad19bd78a7c
                           .group:0000000000000000 wm4.math.h.351.d4dfe6acabbee9531318a05b7f2a0ebb
                           .group:0000000000000000 wm4.math.h.425.2efffd24121ddc7a50a9546d2ff8db42
                           .group:0000000000000000 wm4.float.h.29.cae0b78251c51e3ff449cb238a29ed5b
                           .group:0000000000000000 wm4.SDL_stdinc.h.115.180d1e3932f1f7c056a46fcb9df1e245
                           .group:0000000000000000 wm4.SDL_stdinc.h.354.fb85ef1ba4707cce7bc7a3e2235877ef
                           .group:0000000000000000 wm4.SDL_assert.h.38.a816d8ff6def56be4119624d5a7175c8
                           .group:0000000000000000 wm4.SDL_atomic.h.127.97edbbad462c2cf06305e72ce928e4c0
                           .group:0000000000000000 wm4.SDL_error.h.52.dba3062a226035abcc91d7910b5f5de5
                           .group:0000000000000000 wm4.SDL_endian.h.29.e0e4ce73af3dcc60e139b476b02b324a
                           .group:0000000000000000 wm4.SDL_endian.h.232.c0a74d4307aad7efdca1cbcdaae9e6b8
                           .group:0000000000000000 wm4.SDL_mutex.h.44.3fe9af3de1be47cedfc511aa738b0cc3
                           .group:0000000000000000 wm4.SDL_rwops.h.42.cee4570130b6f406a6debac15d123780
                           .group:0000000000000000 wm4.SDL_audio.h.71.1e0cc6b8b8658d607310137c9da7b07b
                           .group:0000000000000000 wm4.xmmintrin.h.57.dc47a842f886cd2400a60ca9a8935828
                           .group:0000000000000000 wm4.emmintrin.h.61.269439cd675e45e6e49a81823fb498f3
                           .group:0000000000000000 wm4.pmmintrin.h.28.ec3db42694c71c1229255d900bcf89c9
                           .group:0000000000000000 wm4.tmmintrin.h.28.e145ddfd374e1689797f214d70bbbd91
                           .group:0000000000000000 wm4.smmintrin.h.28.83358a3f7ef82af009973cc27a6b069a
                           .group:0000000000000000 wm4.popcntintrin.h.25.c1464cb071be2185b7a608f66726df5a
                           .group:0000000000000000 wm4.smmintrin.h.816.c9a980d238b46bcd6295ec3335a5170e
                           .group:0000000000000000 wm4.wmmintrin.h.28.c966cd91370abd10282c632513a4246a
                           .group:0000000000000000 wm4.xsaveintrin.h.29.757dd3393537008a38d56eab10c9cbf3
                           .group:0000000000000000 wm4.xsaveoptintrin.h.29.bdd26e04ddb1a67afb8531568408ae15
                           .group:0000000000000000 wm4.xsavesintrin.h.29.841b25cc8374b2217438181989e36364
                           .group:0000000000000000 wm4.xsavecintrin.h.29.dca8ec181b4314e238d03455ea290e0d
                           .group:0000000000000000 wm4.avxintrin.h.32.99d063dfd6e4bdc85873d3c3538ff768
                           .group:0000000000000000 wm4.avx2intrin.h.29.6b6ed311918e72fdbcd8d60e75cb1ca6
                           .group:0000000000000000 wm4.avx512fintrin.h.29.abc104dd464d148a7b2ccc3754987977
                           .group:0000000000000000 wm4.avx512erintrin.h.29.1f7162f7a0359e0017143cd11219ee34
                           .group:0000000000000000 wm4.avx512pfintrin.h.29.fbe3b5380d3f7265c6bb1f0c4cb011a8
                           .group:0000000000000000 wm4.avx512cdintrin.h.29.d9df1ef4d4ae9b0a9de9f7c4f89f5bb5
                           .group:0000000000000000 wm4.avx512vlintrin.h.29.28640a75471f0d465a493ce812569815
                           .group:0000000000000000 wm4.avx512bwintrin.h.29.5f418f03c9d55f85aa6f58acea9d0cbd
                           .group:0000000000000000 wm4.avx512dqintrin.h.29.49eecd0d919e8794ee14e8cdae89d285
                           .group:0000000000000000 wm4.avx512vlbwintrin.h.29.e7baa07183fe7daa7544b09725a46a8f
                           .group:0000000000000000 wm4.avx512vldqintrin.h.29.68f8ca3dde41b8d4e9794449ce17515a
                           .group:0000000000000000 wm4.avx512ifmaintrin.h.29.231028cd666b3a5f2a6efea1ebb3e0fb
                           .group:0000000000000000 wm4.avx512ifmavlintrin.h.29.d71aec27099189529d7ef6bc309ec69e
                           .group:0000000000000000 wm4.avx512vbmiintrin.h.29.0e360df22fe8c06eb104026a4f20fc38
                           .group:0000000000000000 wm4.avx512vbmivlintrin.h.29.9d0f7ae40a5e92edd6a89b48fcc14cd2
                           .group:0000000000000000 wm4.avx5124fmapsintrin.h.29.751757ba8d92a93958714c42ee525f3c
                           .group:0000000000000000 wm4.avx5124vnniwintrin.h.29.5391003f45e0e72aab62e09196bafc4e
                           .group:0000000000000000 wm4.avx512vpopcntdqintrin.h.29.ca304711e140a85538e872a951e2ca14
                           .group:0000000000000000 wm4.avx512vbmi2intrin.h.29.54fc6e529e7398cf7e31a0ecc41463f0
                           .group:0000000000000000 wm4.avx512vbmi2vlintrin.h.29.050440e30917195ca1f92a143d15f713
                           .group:0000000000000000 wm4.avx512vnniintrin.h.29.ea1df5dbb2ffae7437e6774e949649e0
                           .group:0000000000000000 wm4.avx512vnnivlintrin.h.29.efb4e0444781ec9ae3b2747bce8bb0b3
                           .group:0000000000000000 wm4.avx512vpopcntdqvlintrin.h.29.795c32ec9342f1bdd3875571c2410e6a
                           .group:0000000000000000 wm4.avx512bitalgintrin.h.29.22b0fb67c5f9c0b56141ed650220c9d8
                           .group:0000000000000000 wm4.shaintrin.h.29.bd098963feebf133e834fde4d457dcd2
                           .group:0000000000000000 wm4.lzcntintrin.h.30.2d24c6c3d95436645d3252bcd118b104
                           .group:0000000000000000 wm4.bmiintrin.h.29.2210e54571afb5f8c22a99e8a5421c87
                           .group:0000000000000000 wm4.bmi2intrin.h.29.04d1e81349cfc175c12f5b09b3517aef
                           .group:0000000000000000 wm4.fmaintrin.h.29.67cac109312b48c019e5e2db02e6a337
                           .group:0000000000000000 wm4.f16cintrin.h.29.4c9abf66a1b988b592d5c254c53eea8e
                           .group:0000000000000000 wm4.rtmintrin.h.29.4b64baca6af5cc340c6ef7b578f0176b
                           .group:0000000000000000 wm4.xtestintrin.h.29.d901dc5b595afb2d3ebebea464d0a88c
                           .group:0000000000000000 wm4.cetintrin.h.29.bea072fb63bd6ff7b0b3199045c89d67
                           .group:0000000000000000 wm4.gfniintrin.h.29.7b215830e69fb98cd7b8d43d44b098ad
                           .group:0000000000000000 wm4.vaesintrin.h.25.d22688f90f2b3d95160cbc7fbdb5300e
                           .group:0000000000000000 wm4.vpclmulqdqintrin.h.29.b8ba381bfdd4475b0f72d511436bd27b
                           .group:0000000000000000 wm4.movdirintrin.h.29.8fbe9cf0cc1b9ed479803473079164e2
                           .group:0000000000000000 wm4.sgxintrin.h.25.07d1e2714f8193fcdc85c61791d11b06
                           .group:0000000000000000 wm4.pconfigintrin.h.6.2cefd1b847623df874ec976ae270c13a
                           .group:0000000000000000 wm4.waitpkgintrin.h.29.2e8be68c71f5092f356d48ab9c336fc9
                           .group:0000000000000000 wm4.cldemoteintrin.h.29.471b41580ea37a50dd83d8cb9c8857c9
                           .group:0000000000000000 wm4.rdseedintrin.h.29.68e10c3f2da0156121a0d308ca36b919
                           .group:0000000000000000 wm4.clwbintrin.h.29.c26201c2f80ab1959a0e2af192976bb2
                           .group:0000000000000000 wm4.clflushoptintrin.h.29.6765f217e5e956556fc790a760e75f32
                           .group:0000000000000000 wm4.wbnoinvdintrin.h.6.fd27e2a96fd309567e1de8d694ad5ffe
                           .group:0000000000000000 wm4.pkuintrin.h.29.ded5b9ad57623657aa852f0baf4a05e1
                           .group:0000000000000000 wm4.immintrin.h.157.1fb99074787acd0b917e13583eb601d9
                           .group:0000000000000000 wm4.SDL_pixels.h.46.339082ab8710dd57598b697220e09815
                           .group:0000000000000000 wm4.SDL_surface.h.52.95ec6e1f046cde52b31abb6a1f0b65e4
                           .group:0000000000000000 wm4.SDL_video.h.128.081d67cb0db569f303a7e50ae746ac21
                           .group:0000000000000000 wm4.SDL_keycode.h.47.0a30a63466b8bfe3bff3f0e38005f9af
                           .group:0000000000000000 wm4.SDL_mouse.h.281.143f9e280b4c89f097b912bb84339621
                           .group:0000000000000000 wm4.SDL_joystick.h.301.2471515b9e105295d0f298cc25018134
                           .group:0000000000000000 wm4.SDL_quit.h.29.f46d2e441cade1efdb3413d5be931b04
                           .group:0000000000000000 wm4.SDL_touch.h.61.ab8ac4ad7360f47bc91939864b28dde2
                           .group:0000000000000000 wm4.SDL_events.h.49.64ba1c45dc1ec9e07662fedbf34b403e
                           .group:0000000000000000 wm4.SDL_haptic.h.163.4ce482a1fa4461f870b4ed73951c7f72
                           .group:0000000000000000 wm4.SDL_hints.h.65.2e1a110c0e3b603b2fe5f76d03752fba
                           .group:0000000000000000 wm4.SDL_shape.h.42.0add07aa0b75de9a4d039dc6510c9c48
                           .group:0000000000000000 wm4.SDL_version.h.60.21c369fe045713ab64c928c3736a76a5
                           .group:0000000000000000 wm4.SDL.h.77.d321a53c105df3acda791ff8b303162f
                           .group:0000000000000000 wm4.myLib.h.2.c5256e6131e659f9ae0422f590fe566a
                           .group:0000000000000000 wm4.assert.h.34.dce7822bb80c73e7bb3b7e09935edebe

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
exit
SDL_Init
SDL_GetError
printf
SDL_SetEventFilter
SDL_CreateWindow
__assert_fail
SDL_CreateRenderer
SDL_CreateTexture
SDL_SetTextureBlendMode
SDL_UpdateTexture
SDL_RenderClear
SDL_RenderCopy
SDL_RenderPresent
memcpy
SDL_PollEvent
SDL_Delay
__stack_chk_fail
